╔═══════════════════════════════════════════════════════════════════════════╗
║              Ceph 客户端与服务端交互流程可视化                             ║
╚═══════════════════════════════════════════════════════════════════════════╝

═══════════════════════════════════════════════════════════════════════════════
                         整体交互架构
═══════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────┐
│                           客户端侧                                       │
│                                                                          │
│  ┌──────────┐  ┌──────────┐  ┌──────────┐  ┌──────────┐               │
│  │   应用   │  │   应用   │  │   应用   │  │   应用   │               │
│  │  进程 1  │  │  进程 2  │  │  进程 3  │  │  进程 N  │               │
│  └─────┬────┘  └─────┬────┘  └─────┬────┘  └─────┬────┘               │
│        │             │             │             │                      │
│        └─────────────┴─────────────┴─────────────┘                      │
│                      │                                                   │
│        ┌─────────────┴─────────────┐                                   │
│        │                           │                                   │
│        ▼                           ▼                                   │
│  ┌──────────┐              ┌──────────────┐                           │
│  │   RBD    │              │   CephFS     │                           │
│  │  Client  │              │   Client     │                           │
│  └────┬─────┘              └──────┬───────┘                           │
│       │                           │                                   │
│       │        ┌──────────────────┘                                   │
│       │        │                                                       │
│       ▼        ▼                                                       │
│  ┌──────────────────────────────┐                                     │
│  │        librados               │                                     │
│  │    (客户端核心库)             │                                     │
│  │                               │                                     │
│  │  功能：                       │                                     │
│  │  • 连接 Monitor               │                                     │
│  │  • 认证 (cephx)               │                                     │
│  │  • 缓存 OSDMap                │                                     │
│  │  • CRUSH 计算                 │                                     │
│  │  • 直连 OSD                   │                                     │
│  │  • I/O 操作                   │                                     │
│  └───────────────┬───────────────┘                                     │
│                  │                                                      │
└──────────────────┼──────────────────────────────────────────────────────┘
                   │
                   │ TCP/IP 网络
                   │ (Client Network)
                   │
┌──────────────────┼──────────────────────────────────────────────────────┐
│                  │              服务端侧                                 │
│                  │                                                       │
│      ┌───────────┼───────────┐                                          │
│      │           │           │                                          │
│      ▼           ▼           ▼                                          │
│  ┌────────┐ ┌────────┐ ┌────────┐                                     │
│  │ Mon A  │ │ Mon B  │ │ Mon C  │                                     │
│  │(Leader)│ │ (Peon) │ │ (Peon) │                                     │
│  └───┬────┘ └───┬────┘ └───┬────┘                                     │
│      │          │          │                                           │
│      └──────────┼──────────┘                                           │
│                 │                                                       │
│         (Cluster Network)                                               │
│                 │                                                       │
│      ┌──────────┼──────────┐                                           │
│      │          │          │                                           │
│      ▼          ▼          ▼                                           │
│  ┌────────┐ ┌────────┐ ┌────────┐                                     │
│  │ OSD 0  │ │ OSD 1  │ │ OSD 2  │  ...                               │
│  │        │ │        │ │        │                                     │
│  │[PG 1.a]│ │[PG 1.b]│ │[PG 2.a]│                                     │
│  │[PG 2.b]│ │[PG 3.a]│ │[PG 3.b]│                                     │
│  └────────┘ └────────┘ └────────┘                                     │
│                                                                         │
│  每个 OSD 独立管理：                                                    │
│  • 负责的 PG                                                           │
│  • BlueStore 存储引擎                                                  │
│  • 本地磁盘                                                            │
└─────────────────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════════════════════
                    流程 1：客户端启动与初始化
═══════════════════════════════════════════════════════════════════════════════

时间线         客户端                    Monitor                    OSD
────────────────────────────────────────────────────────────────────────────

T=0
应用启动
  │
  ├─ import rados
  │  cluster = rados.Rados()
  │
  ▼
┌──────────────────┐
│ 1. 加载配置      │
│    /etc/ceph/    │
│    ceph.conf     │
└────────┬─────────┘
         │
         ▼
┌──────────────────┐
│ 2. 加载密钥      │
│    keyring       │
└────────┬─────────┘
         │
         ▼
┌──────────────────┐
│ 3. 连接 Monitor  │
│    (轮询列表)    │
└────────┬─────────┘
         │
         │ TCP 连接
         │ (6789 端口)
         ├────────────────────>┌──────────────────┐
         │                      │ Mon A (Leader)   │
         │                      │ 接受连接         │
         │                      └────────┬─────────┘
         │                               │
         │    ┌──────────────────────────┘
         │    │
         │    ▼
         │ ┌──────────────────┐
         │ │ 4. 认证 (cephx)  │
         │ │                  │
         │ │ a) 客户端发送：  │
         │ │    - entity name │
         │ │    - nonce       │
         ├─┼──────────────────>│
         │ │                  │
         │ │ b) Monitor 生成：│
         │ │    - session key │
         │ │    - ticket      │
         │ │      (加密)      │
         │ │<─────────────────│
         │ │                  │
         │ │ c) 客户端解密：  │
         │ │    - 验证 ticket │
         │ └──────────────────┘
         │          │
         ▼          │
┌──────────────────┐│
│ 5. 认证成功 ✓    ││
└────────┬─────────┘│
         │          │
         │          ▼
         │    ┌──────────────────┐
         │    │ 6. 请求集群地图  │
         │    │                  │
         │    │ 需要：           │
         │    │ • OSDMap         │
         │    │ • CRUSH Map      │
         │    │ • Pool 信息      │
         ├────┼──────────────────>│
         │    │                  │
         │    │   返回地图       │
         │    │<─────────────────│
         │    │   (序列化数据)   │
         │    └──────────────────┘
         │          │
         ▼          │
┌──────────────────┐│
│ 7. 缓存集群地图  ││
│    • epoch: 1523 ││
│    • OSDs: 100   ││
│    • Pools: 5    ││
└────────┬─────────┘│
         │          │
         │          ▼
         │    ┌──────────────────┐
         │    │ 8. 订阅更新      │
         │    │                  │
         │    │ Monitor 会主动   │
         │    │ 推送地图变化     │
         ├────┼──────────────────>│
         │    │   Subscription   │
         │    │      ACK         │
         │    │<─────────────────│
         │    └──────────────────┘
         │
         ▼
┌──────────────────┐
│ 初始化完成 ✓     │
│ 可以执行 I/O     │
└──────────────────┘


═══════════════════════════════════════════════════════════════════════════════
                    流程 2：写入操作详细流程
═══════════════════════════════════════════════════════════════════════════════

客户端                    Monitor                 Primary OSD          Replica OSDs
────────────────────────────────────────────────────────────────────────────────

应用：
write("obj1", data)
  │
  ▼
┌──────────────────┐
│ 1. librados 处理 │
│                  │
│ a) 查找 pool     │
│    "mypool" → 2  │
│                  │
│ b) 计算哈希      │
│    hash("obj1")  │
│    = 0xABCD1234  │
│                  │
│ c) 计算 PG       │
│    0xABCD1234    │
│    % 1024 = 452  │
│    → PG 2.452    │
│                  │
│ d) CRUSH 计算    │
│    CRUSH(2.452)  │
│    → [5, 12, 23] │
│    Primary: 5    │
└────────┬─────────┘
         │
         │ (无需访问 Monitor！)
         │
         ▼
┌──────────────────┐
│ 2. 构造消息      │
│                  │
│ MOSDOp {         │
│   pool: 2,       │
│   pgid: 2.452,   │
│   oid: "obj1",   │
│   ops: [WRITE],  │
│   data: [...]    │
│ }                │
└────────┬─────────┘
         │
         │ TCP 连接到 OSD 5
         │ (直接连接，绕过 Monitor)
         │
         ├────────────────────────────────>┌──────────────────┐
         │                                  │ OSD 5 (Primary)  │
         │                                  │                  │
         │                                  │ 3. 接收并验证    │
         │                                  │    • 权限 ✓      │
         │                                  │    • epoch ✓     │
         │                                  │    • PG 状态 ✓   │
         │                                  └────────┬─────────┘
         │                                           │
         │                                           ▼
         │                                  ┌──────────────────┐
         │                                  │ 4. 分配版本号    │
         │                                  │    (1523, 789)   │
         │                                  │                  │
         │                                  │ 5. 生成日志      │
         │                                  │    pg_log_entry  │
         │                                  │                  │
         │                                  │ 6. 本地写入      │
         │                                  │    BlueStore     │
         │                                  │    write()       │
         │                                  └────────┬─────────┘
         │                                           │
         │                                           │ 7. 复制
         │                                           │
         │                                  ┌────────┴─────────┐
         │                                  │                  │
         │                                  │   MOSDRepOp      │
         │                                  │   (Transaction)  │
         │                                  │                  │
         │                          ┌───────┼───────>┌──────────────┐
         │                          │       │        │  OSD 12      │
         │                          │       │        │  (Replica 1) │
         │                          │       │        │              │
         │                          │       │        │ 8. 写入      │
         │                          │       │        │    BlueStore │
         │                          │       │        └──────┬───────┘
         │                          │       │               │
         │                          │       │               │ Reply
         │                          │       │        ┌──────┴───────┐
         │                          │       │<───────│  MOSDRepOpReply
         │                          │       │        │  committed ✓ │
         │                          │       │        └──────────────┘
         │                          │       │
         │                          │       └───────>┌──────────────┐
         │                          │                │  OSD 23      │
         │                          │                │  (Replica 2) │
         │                          │                │              │
         │                          │                │ 9. 写入      │
         │                          │                │    BlueStore │
         │                          │                └──────┬───────┘
         │                          │                       │
         │                          │                       │ Reply
         │                          │                ┌──────┴───────┐
         │                          │<───────────────│  MOSDRepOpReply
         │                          │                │  committed ✓ │
         │                          │                └──────────────┘
         │                          │
         │                          ▼
         │                   ┌──────────────────┐
         │                   │ 10. 收集响应     │
         │                   │     OSD 12 ✓     │
         │                   │     OSD 23 ✓     │
         │                   │                  │
         │                   │ 11. 全部提交     │
         │                   │     触发回调     │
         │                   └────────┬─────────┘
         │                            │
         │      MOSDOpReply           │
         │      (成功, version)       │
         │<───────────────────────────┤
         │                            │
         ▼                            │
┌──────────────────┐                 │
│ 12. 客户端收到   │                 │
│     写入成功 ✓   │                 │
│                  │                 │
│ 13. 返回应用     │                 │
│     write() OK   │                 │
└──────────────────┘                 │
                                     │
                                     ▼
                              (I/O 完成)


═══════════════════════════════════════════════════════════════════════════════
                    流程 3：读取操作流程
═══════════════════════════════════════════════════════════════════════════════

客户端                                    Primary OSD
────────────────────────────────────────────────────────────────

应用：
read("obj1", buffer)
  │
  ▼
┌──────────────────┐
│ 1. librados      │
│                  │
│ • 查找 Pool      │
│ • 计算 PG        │
│ • CRUSH 计算     │
│   → OSD 5        │
└────────┬─────────┘
         │
         │ MOSDOp (READ)
         │
         ├────────────────────────>┌──────────────────┐
         │                          │ OSD 5            │
         │                          │                  │
         │                          │ 2. 查找对象      │
         │                          │    object_       │
         │                          │    contexts[]    │
         │                          │                  │
         │                          │ 3. 读取数据      │
         │                          │    BlueStore::   │
         │                          │    read()        │
         │                          │    • 查 RocksDB  │
         │                          │    • 读设备      │
         │                          │    • 校验和 ✓    │
         │                          └────────┬─────────┘
         │                                   │
         │      MOSDOpReply                  │
         │      (数据 + 版本)                │
         │<──────────────────────────────────┤
         │                                   │
         ▼                                   │
┌──────────────────┐                        │
│ 4. 接收数据      │                        │
│                  │                        │
│ 5. 返回应用      │                        │
│    read() OK     │                        │
└──────────────────┘                        │
                                            │
                                            ▼
                                      (读完成)

注意：读操作只需访问 Primary OSD，不需要等待 Replicas


═══════════════════════════════════════════════════════════════════════════════
                    流程 4：OSD 故障与恢复
═══════════════════════════════════════════════════════════════════════════════

时间线         OSD 2         OSD 5         OSD 7         Monitor
────────────────────────────────────────────────────────────────────────

T=0
正常运行
   │             │             │             │
   │  heartbeat  │             │             │
   ├────────────>│             │             │
   │             │   heartbeat │             │
   │             ├────────────>│             │
   │             │             │             │
   │             │             │             │

T=5
OSD 5 故障 ✗
   │             ✗ (宕机)      │             │
   │  heartbeat  │             │             │
   ├─────────────┼─> (超时)    │             │
   │             │             │             │
   │             │   heartbeat │             │
   │             │<────────────┤ (超时)      │
   │             │             │             │

T=10
故障检测
   │                           │             │
   │  MOSDFailure(OSD 5)       │             │
   ├────────────────────────────────────────>│
   │                           │             │┌──────────────┐
   │                           │  MOSDFailure││ 收集故障报告 │
   │                           │<─────────────┤│ • OSD 2 ✓    │
   │                           │             ││ • OSD 7 ✓    │
   │                           │             ││              │
   │                           │             ││ 多数派确认   │
   │                           │             │└──────┬───────┘
   │                           │             │       │
T=15                          │             │       ▼
OSDMap 更新                    │             │┌──────────────┐
   │                           │             ││ 更新 OSDMap  │
   │        新 OSDMap (epoch++)│             ││ OSD 5: DOWN  │
   │<──────────────────────────────────────────┤              │
   │                           │             ││ 广播新地图   │
   │                           │<─────────────┤              │
   │                           │             │└──────────────┘
   │                           │             │
   ▼                           │             │
┌──────────────┐              │             │
│ 接收新 OSDMap│              │             │
│              │              │             │
│ 发现：       │              │             │
│ PG 2.452     │              │             │
│ [2, 5, 7]    │              │             │
│   → [2, 8, 7]│              │             │
│     ↑新副本  │              │             │
└──────┬───────┘              │             │
       │                      │             │
       ▼                      │             │
┌──────────────┐              │             │
│ 触发 Peering │              │             │
│              │              │             │
│ 状态：       │              │             │
│ Active       │              │             │
│  → Peering   │              │             │
│  → Active+   │              │             │
│    Degraded  │              │             │
└──────┬───────┘              │             │
       │                      │             │
       ▼                      │             │
┌──────────────┐              │             │
│ 启动恢复     │              │             │
│              │              │             │
│ 目标：OSD 8  │              │             │
│ (新副本)     │              │             │
└──────┬───────┘              │             │
       │                      │             │
       │   恢复数据            │             │
       │   (Push objects)     │             │
       ├─────────────────────>OSD 8         │
       │                    (接收并写入)    │
       │                      │             │
       │   ... 恢复中 ...     │             │
       │                      │             │
       ▼                      │             │
┌──────────────┐              │             │
│ 恢复完成     │              │             │
│              │              │             │
│ 状态：       │              │             │
│ Degraded     │              │             │
│  → Clean ✓   │              │             │
└──────────────┘              │             │


═══════════════════════════════════════════════════════════════════════════════
                    流程 5：PG Peering 详细流程
═══════════════════════════════════════════════════════════════════════════════

Primary OSD (OSD 2)              OSD 7                 OSD 8
────────────────────────────────────────────────────────────────

OSDMap 变化触发
  │
  ▼
┌──────────────────┐
│ Reset            │
│ • 清理旧状态     │
└────────┬─────────┘
         │
         ▼
┌──────────────────┐
│ Started/Primary  │
└────────┬─────────┘
         │
         ▼
┌──────────────────────────────┐
│ Peering/GetInfo               │
│                               │
│ 发送 pg_query_t：             │
│ • 请求 PG 信息                │
│ • 请求日志范围                │
└────┬───────────┬──────────────┘
     │           │
     │           └──────────────────>┌──────────────┐
     │                               │ 查询本地     │
     │                               │ pg_info_t    │
     │           pg_notify_t         │              │
     │<──────────────────────────────┤ last_update: │
     │           (PG 信息)           │   (1525, 99) │
     │                               └──────────────┘
     │
     └─────────────────────────────>┌──────────────┐
                                     │ 新 OSD       │
                                     │ 无数据       │
              pg_notify_t            │              │
     <───────────────────────────────┤ last_update: │
              (空状态)               │   (0, 0)     │
                                     └──────────────┘
     │
     ▼
┌──────────────────────────────┐
│ Peering/GetLog                │
│                               │
│ 选择权威：                    │
│ • 对比 last_update            │
│ • 我（OSD 2）最新             │
│                               │
│ 请求完整日志：                │
└────┬──────────────────────────┘
     │
     └─────────────────────────────>┌──────────────┐
                                     │ 返回日志     │
              pg_log_t               │              │
     <───────────────────────────────┤ [entries...] │
                                     └──────────────┘
     │
     ▼
┌──────────────────────────────┐
│ Peering/GetMissing            │
│                               │
│ 合并日志，生成权威版本        │
│                               │
│ 对比日志，确定缺失：          │
│ • OSD 7: missing [obj_x]      │
│ • OSD 8: missing [all]        │
└────┬──────────────────────────┘
     │
     ▼
┌──────────────────────────────┐
│ Active                        │
│ • PG 激活                     │
│ • 状态：Active+Degraded       │
│ • 启动恢复                    │
└───────────────────────────────┘


═══════════════════════════════════════════════════════════════════════════════
                    流程 6：CephFS 完整流程
═══════════════════════════════════════════════════════════════════════════════

客户端              MDS                OSD (元数据 Pool)    OSD (数据 Pool)
────────────────────────────────────────────────────────────────────────

1. 挂载文件系统
mount -t ceph
  mon:/ /mnt/cephfs
  │
  ▼
┌──────────────┐
│ 连接 Monitor │
│ 获取 MDSMap  │
└──────┬───────┘
       │
       │ 连接 Active MDS
       │
       ├─────────────>┌──────────────┐
       │               │ MDS Active   │
       │               │ 建立 session │
       │               └──────────────┘
       │
       ▼
 挂载成功

2. 打开文件
open("/mnt/cephfs/
      data/file.txt")
  │
  ▼
┌──────────────┐
│ MClientRequest│
│ (LOOKUP)     │
└──────┬───────┘
       │
       ├─────────────>┌──────────────────┐
       │               │ MDS 处理         │
       │               │                  │
       │               │ 查询目录树：     │
       │               │ • 从缓存         │
       │               │ • 或从 OSD 读取 │
       │               └────┬─────────────┘
       │                    │
       │                    │ 读取 inode
       │                    │
       │                    └──────────>OSD
       │                                (元数据 Pool)
       │                    读取完成
       │                    │<────────────┘
       │                    │
       │               ┌────▼─────────────┐
       │               │ 返回元数据：     │
       │               │ • inode number   │
       │               │ • size           │
       │               │ • layout         │
       │               │ • capability     │
       │<──────────────┤   (权限令牌)     │
       │               └──────────────────┘
       │ MClientReply
       │
       ▼
 open() 成功

3. 读取数据
read(fd, buf, 4096)
  │
  ▼
┌──────────────────┐
│ 计算对象名：     │
│ inode.obj_num    │
│                  │
│ 直接访问 OSD ✓   │
│ (绕过 MDS)       │
└────┬─────────────┘
     │
     │ librados read
     │
     └───────────────────────────────────>OSD
                                          (数据 Pool)
                                           │
                                           │ BlueStore::read()
                                           │
        数据返回                            │
     <──────────────────────────────────────┘
     │
     ▼
 read() 成功


═══════════════════════════════════════════════════════════════════════════════
                    关键设计原则
═══════════════════════════════════════════════════════════════════════════════

1. 去中心化 (Decentralization)
   ═══════════════════════════════════════════════════════════
   
   ✓ 客户端直接访问 OSD
     - 不经过中心化网关
     - 避免瓶颈
   
   ✓ CRUSH 算法
     - 客户端自己计算数据位置
     - 无需查询元数据服务器
   
   ✓ 智能 OSD
     - 自主处理复制、恢复
     - 相互协作

2. 强一致性 (Strong Consistency)
   ═══════════════════════════════════════════════════════════
   
   ✓ Monitor 层 (Paxos)
     - 保证集群状态一致
     - 多数派仲裁
   
   ✓ OSD 层 (PG Log)
     - 记录所有操作
     - Peering 确保副本一致
   
   ✓ 写入确认
     - 等待所有副本持久化
     - 数据安全

3. 自我管理 (Self-Management)
   ═══════════════════════════════════════════════════════════
   
   ✓ 自动复制
     - Primary 协调副本写入
     - 无需人工干预
   
   ✓ 自动恢复
     - 检测故障
     - 自动启动恢复
   
   ✓ 自动重平衡
     - 新 OSD 加入
     - 数据自动迁移

4. 并行 I/O (Parallel I/O)
   ═══════════════════════════════════════════════════════════
   
   ✓ 条带化 (Striping)
     - 大文件分割成多个对象
     - 分布到不同 OSD
   
   ✓ 并发访问
     - 多个客户端同时访问
     - 不同 PG 无锁竞争
   
   ✓ 聚合带宽
     - 利用所有 OSD 的 I/O 能力
     - 性能随节点线性增长


═══════════════════════════════════════════════════════════════════════════════
                    性能优化要点
═══════════════════════════════════════════════════════════════════════════════

客户端优化：
───────────────────────────────────────────
• 批量 I/O：减少请求次数
• 对象缓存：避免重复读取
• 异步 I/O：充分利用并发
• 连接复用：减少建连开销

Monitor 优化：
───────────────────────────────────────────
• 租约机制：减少 Paxos 开销
• 增量更新：只发送变化部分
• 订阅机制：主动推送更新

OSD 优化：
───────────────────────────────────────────
• mClock 调度：QoS 保证
• PG Sharding：减少锁竞争
• BlueStore 缓存：加速访问
• 批量提交：减少 fsync 次数

网络优化：
───────────────────────────────────────────
• 独立网络：Client 和 Cluster 分离
• 高带宽：25Gb/s 或更高
• RDMA：降低 CPU 开销（可选）


═══════════════════════════════════════════════════════════════════════════════
                    故障场景处理
═══════════════════════════════════════════════════════════════════════════════

场景 1：单个 OSD 故障
───────────────────────────────────────────
检测 → 标记 DOWN → 重新映射 PG → 恢复数据
时间：分钟级别
影响：客户端 I/O 继续（降级）

场景 2：网络分区
───────────────────────────────────────────
Monitor 多数派 → 继续服务
少数派 → 拒绝 I/O（保证一致性）

场景 3：Monitor 故障
───────────────────────────────────────────
自动选举新 Leader → 服务恢复
影响：秒级中断

场景 4：数据损坏
───────────────────────────────────────────
Deep Scrub 检测 → 从副本恢复
自动修复，无需人工

场景 5：磁盘满
───────────────────────────────────────────
OSD 报警 → 停止接受写入
集群只读，直到清理空间

