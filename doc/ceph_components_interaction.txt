╔═══════════════════════════════════════════════════════════════════════════╗
║              Ceph 核心组件交互流程可视化图                                ║
╚═══════════════════════════════════════════════════════════════════════════╝

═══════════════════════════════════════════════════════════════════════════════
                    一、组件启动顺序
═══════════════════════════════════════════════════════════════════════════════

步骤 1：启动 Monitor 集群 (ceph-mon)
────────────────────────────────────────────────────────────────────────
┌─────────────┐    ┌─────────────┐    ┌─────────────┐
│  ceph-mon   │    │  ceph-mon   │    │  ceph-mon   │
│   node-a    │    │   node-b    │    │   node-c    │
│   (Leader)  │◄──►│ (Peon)      │◄──►│ (Peon)      │
└──────┬──────┘    └──────┬──────┘    └──────┬──────┘
       │                  │                  │
       └──────────────────┴──────────────────┘
                          │
                    Paxos 选举
                          │
                          ▼
                  ┌────────────────┐
                  │  Leader 选出   │
                  │  初始化 OSDMap │
                  │  等待 OSD 注册 │
                  └────────────────┘


步骤 2：启动 Manager (ceph-mgr)
────────────────────────────────────────────────────────────────────────
┌─────────────┐              ┌─────────────┐
│  ceph-mgr   │              │  ceph-mgr   │
│   node-x    │              │   node-y    │
│  (Active)   │◄────────────►│ (Standby)   │
└──────┬──────┘              └─────────────┘
       │
       │ 连接 Monitor
       │
       ▼
┌─────────────────────────────────────────────┐
│  Active Manager 启动                         │
│  ├─ 加载 Python 模块                         │
│  ├─ 启动 Dashboard (8443)                    │
│  ├─ 启动 Prometheus (9283)                   │
│  ├─ 启动 Balancer                            │
│  └─ 开始收集集群统计                          │
└─────────────────────────────────────────────┘


步骤 3：启动 OSD (ceph-osd)
────────────────────────────────────────────────────────────────────────
┌─────────────┐  ┌─────────────┐  ┌─────────────┐
│  ceph-osd   │  │  ceph-osd   │  │  ceph-osd   │
│     0       │  │     1       │  │     2       │
└──────┬──────┘  └──────┬──────┘  └──────┬──────┘
       │                │                │
       └────────────────┴────────────────┘
                        │
                        │ 注册到 Monitor
                        ▼
                ┌────────────────┐
                │  Monitor       │
                │  ├─ 更新 OSDMap│
                │  ├─ 计算 PG    │
                │  └─ 广播 Map   │
                └────────────────┘
                        │
                        ▼
        ┌───────────────────────────────────┐
        │  OSD 收到 OSDMap                   │
        │  ├─ 创建/加载 PG                   │
        │  ├─ Peering                        │
        │  ├─ Recovery (如果需要)            │
        │  └─ 开始提供服务                    │
        └───────────────────────────────────┘


步骤 4：启动 MDS (ceph-mds) - 仅 CephFS
────────────────────────────────────────────────────────────────────────
┌─────────────┐              ┌─────────────┐
│  ceph-mds   │              │  ceph-mds   │
│   myfs-a    │              │   myfs-b    │
│  (Active)   │◄────────────►│ (Standby)   │
└──────┬──────┘              └─────────────┘
       │
       │ 1. 连接 Monitor
       │ 2. 获取 MDSMap
       │ 3. 确定 rank
       │
       ▼
┌─────────────────────────────────────────────┐
│  MDS 状态机                                  │
│  STANDBY → REPLAY → RECONNECT → REJOIN → ACTIVE│
└─────────────────────────────────────────────┘


步骤 5：客户端连接 (ceph-fuse)
────────────────────────────────────────────────────────────────────────
┌─────────────┐
│  ceph-fuse  │
│  /mnt/cephfs│
└──────┬──────┘
       │
       │ 1. 连接 Monitor → 获取 cluster map
       │ 2. 连接 MDS → 元数据操作
       │ 3. 连接 OSD → 数据 I/O
       │
       ▼
┌─────────────────────────────────────────────┐
│  挂载文件系统                                │
│  └─ 用户可以使用标准 POSIX 操作              │
└─────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════════════════════
                    二、组件架构关系
═══════════════════════════════════════════════════════════════════════════════

                        ┌─────────────────────────────────┐
                        │      Monitor 集群 (Paxos)       │
                        │  ┌─────┐  ┌─────┐  ┌─────┐     │
                        │  │mon-a│  │mon-b│  │mon-c│     │
                        │  └─────┘  └─────┘  └─────┘     │
                        │                                 │
                        │  管理：                          │
                        │  • OSDMap (OSD 集群地图)        │
                        │  • MDSMap (MDS 地图)            │
                        │  • MonMap (Monitor 地图)        │
                        │  • CrushMap (数据分布算法)      │
                        │  • 认证密钥                      │
                        └──────────────┬──────────────────┘
                                       │
                ┌──────────────────────┼──────────────────────┐
                │                      │                      │
                ▼                      ▼                      ▼
    ┌─────────────────────┐  ┌─────────────────────┐  ┌──────────────┐
    │   Manager 集群      │  │    OSD 集群          │  │  MDS 集群    │
    │  ┌──────┐ ┌──────┐ │  │  ┌────┐ ┌────┐ ...  │  │  ┌─────┐     │
    │  │Active│ │Standby││  │  │OSD0│ │OSD1│      │  │  │Active│    │
    │  └──────┘ └──────┘ │  │  └────┘ └────┘      │  │  └─────┘     │
    │                     │  │                      │  │  ┌─────┐     │
    │  提供：             │  │  提供：              │  │  │Standby│   │
    │  • 监控             │  │  • 数据存储          │  │  └─────┘     │
    │  • Dashboard        │  │  • 数据复制          │  │              │
    │  • Prometheus       │  │  • 数据恢复          │  │  提供：       │
    │  • 管理 API         │  │  • CRUSH 计算        │  │  • 元数据     │
    └─────────────────────┘  └─────────────────────┘  │  • 目录树     │
                                                        │  • 文件属性   │
                                                        └──────────────┘
                                       │
                                       │
                                       ▼
                        ┌─────────────────────────────────┐
                        │          客户端                  │
                        │  ┌──────────┐  ┌─────────────┐  │
                        │  │ceph-fuse │  │ librbd/RGW  │  │
                        │  │(CephFS)  │  │ (块/对象)   │  │
                        │  └──────────┘  └─────────────┘  │
                        └─────────────────────────────────┘


═══════════════════════════════════════════════════════════════════════════════
                    三、详细交互流程
═══════════════════════════════════════════════════════════════════════════════

场景 1：OSD 启动注册流程
────────────────────────────────────────────────────────────────────────

┌─────────┐                    ┌─────────┐
│ ceph-osd│                    │ceph-mon │
│         │                    │         │
└────┬────┘                    └────┬────┘
     │                              │
     │ 1. Boot 消息 (MOSDBoot)      │
     │ ────────────────────────────►│
     │    包含：                     │
     │    - OSD UUID                │
     │    - 超级块信息               │
     │    - 支持的 feature          │
     │                              │
     │                              │ 2. 验证 OSD
     │                              │    检查 UUID
     │                              │    检查版本兼容性
     │                              │
     │ 3. OSDMap (MOSDMap)          │
     │ ◄────────────────────────────│
     │    包含：                     │
     │    - 当前 epoch               │
     │    - 所有 OSD 状态           │
     │    - CRUSH map               │
     │                              │
     │ 4. 加载 PG                   │
     │    解析 OSDMap               │
     │    创建本地 PG               │
     │                              │
     │ 5. PG 状态报告 (MPGStats)    │
     │ ────────────────────────────►│
     │    包含：                     │
     │    - 每个 PG 的状态          │
     │    - 存储统计                │
     │                              │
     │ 6. 心跳开始 (MOSDPing)       │
     │ ◄───────────────────────────►│
     │    定期发送 (每 6 秒)         │
     │                              │
     └──────────────────────────────┘


场景 2：Manager 收集监控数据
────────────────────────────────────────────────────────────────────────

┌─────────┐     ┌─────────┐     ┌─────────┐     ┌──────────┐
│ceph-mgr │     │ceph-mon │     │ceph-osd │     │Dashboard │
│         │     │         │     │         │     │  (Web)   │
└────┬────┘     └────┬────┘     └────┬────┘     └────┬─────┘
     │               │               │               │
     │ 1. 订阅集群事件                │               │
     │ ──────────────►               │               │
     │               │               │               │
     │ 2. 获取 OSD 统计               │               │
     │ ─────────────────────────────►│               │
     │               │               │               │
     │               │ 3. 返回统计数据 │               │
     │ ◄─────────────────────────────│               │
     │               │               │               │
     │ 4. 聚合数据    │               │               │
     │    计算指标    │               │               │
     │               │               │               │
     │ 5. 存储到 Prometheus           │               │
     │    暴露指标    │               │               │
     │               │               │               │
     │               │               │ 6. HTTP 请求   │
     │               │               │ ◄──────────────│
     │               │               │               │
     │ 7. Dashboard API 调用         │               │
     │ ──────────────────────────────────────────────►│
     │               │               │               │
     │ 8. 返回 JSON 数据             │               │
     │ ◄──────────────────────────────────────────────│
     │               │               │               │
     └───────────────┴───────────────┴───────────────┘


场景 3：CephFS 文件读取流程 (ceph-fuse)
────────────────────────────────────────────────────────────────────────

┌──────────┐   ┌─────────┐   ┌─────────┐   ┌─────────┐
│  用户     │   │ceph-fuse│   │ceph-mds │   │ceph-osd │
│应用程序   │   │         │   │         │   │         │
└────┬─────┘   └────┬────┘   └────┬────┘   └────┬────┘
     │              │              │              │
     │ 1. read()    │              │              │
     │─────────────►│              │              │
     │              │              │              │
     │              │ 2. lookup    │              │
     │              │──────────────►              │
     │              │   (获取 inode)              │
     │              │              │              │
     │              │ 3. inode info│              │
     │              │◄──────────────              │
     │              │   (包含对象列表)            │
     │              │              │              │
     │              │ 4. RADOS read               │
     │              │──────────────────────────────►
     │              │   (直接从 OSD 读取)        │
     │              │              │              │
     │              │              │ 5. 数据       │
     │              │◄──────────────────────────────
     │              │              │              │
     │ 6. 返回数据   │              │              │
     │◄─────────────│              │              │
     │              │              │              │
     └──────────────┴──────────────┴──────────────┘


场景 4：客户端写入流程 (RBD)
────────────────────────────────────────────────────────────────────────

┌──────────┐   ┌─────────┐   ┌─────────┐   ┌─────────┐
│  应用     │   │ librbd  │   │ceph-mon │   │ceph-osd │
│ (虚拟机)  │   │         │   │         │   │(Primary)│
└────┬─────┘   └────┬────┘   └────┬────┘   └────┬────┘
     │              │              │              │
     │ 1. write()   │              │              │
     │─────────────►│              │              │
     │              │              │              │
     │              │ 2. 获取 OSDMap              │
     │              │──────────────►              │
     │              │              │              │
     │              │ 3. OSDMap    │              │
     │              │◄──────────────              │
     │              │              │              │
     │              │ 4. CRUSH 计算 │              │
     │              │   确定 PG 和 OSD            │
     │              │              │              │
     │              │ 5. 写请求 (MOSDOp)          │
     │              │──────────────────────────────►
     │              │              │              │
     │              │              │ 6. 复制到 Replica
     │              │              │    写入 BlueStore
     │              │              │              │
     │              │ 7. ACK       │              │
     │              │◄──────────────────────────────
     │              │              │              │
     │ 8. 完成      │              │              │
     │◄─────────────│              │              │
     │              │              │              │
     └──────────────┴──────────────┴──────────────┘


═══════════════════════════════════════════════════════════════════════════════
                    四、组件端口与通信
═══════════════════════════════════════════════════════════════════════════════

组件端口分配
────────────────────────────────────────────────────────────────────────
┌─────────────┬──────────────────────────────────────────────────┐
│   组件      │                  端口                             │
├─────────────┼──────────────────────────────────────────────────┤
│ ceph-mon    │ 3300 (v2) / 6789 (v1)  - Monitor 协议            │
│             │                                                   │
│ ceph-mgr    │ 6800 (默认)            - Messenger               │
│             │ 8443                   - Dashboard HTTPS        │
│             │ 9283                   - Prometheus             │
│             │ 8003                   - RESTful API            │
│             │                                                   │
│ ceph-osd    │ 6800-6803              - 公共网络               │
│             │ 6804-6807              - 集群网络               │
│             │ 6808-6811              - 心跳网络               │
│             │                                                   │
│ ceph-mds    │ 6800+ (动态分配)       - MDS 协议               │
│             │                                                   │
│ ceph-fuse   │ (客户端，不监听端口)                             │
└─────────────┴──────────────────────────────────────────────────┘


网络拓扑
────────────────────────────────────────────────────────────────────────

                        ┌─────────────────┐
                        │  公共网络        │
                        │  (Client-facing) │
                        └────────┬────────┘
                                 │
        ┌────────────────────────┼────────────────────────┐
        │                        │                        │
        ▼                        ▼                        ▼
  ┌──────────┐            ┌──────────┐            ┌──────────┐
  │ Monitor  │            │   MGR    │            │   MDS    │
  │  :3300   │            │  :6800   │            │  :6800   │
  └──────────┘            │  :8443   │            └──────────┘
                          │  :9283   │
                          └──────────┘
        │                        │                        │
        └────────────────────────┼────────────────────────┘
                                 │
                        ┌────────┴────────┐
                        │  集群网络        │
                        │  (Cluster-only)  │
                        └────────┬────────┘
                                 │
        ┌────────────────────────┼────────────────────────┐
        │                        │                        │
        ▼                        ▼                        ▼
  ┌──────────┐            ┌──────────┐            ┌──────────┐
  │  OSD 0   │◄──────────►│  OSD 1   │◄──────────►│  OSD 2   │
  │  :6800   │            │  :6800   │            │  :6800   │
  │  :6804   │  心跳网络  │  :6804   │  心跳网络  │  :6804   │
  └──────────┘            └──────────┘            └──────────┘


═══════════════════════════════════════════════════════════════════════════════
                    五、故障处理流程
═══════════════════════════════════════════════════════════════════════════════

OSD 故障检测与恢复
────────────────────────────────────────────────────────────────────────

时刻 T0: 正常运行
────────────────────────────────────────────────────────────────────────
┌─────────┐  心跳  ┌─────────┐  心跳  ┌─────────┐
│  OSD 0  │◄──────►│  OSD 1  │◄──────►│  OSD 2  │
│(Primary)│        │(Replica)│        │(Replica)│
└────┬────┘        └────┬────┘        └────┬────┘
     │                  │                  │
     └──────────────────┴──────────────────┘
                        │
                   向 Monitor 报告


时刻 T1: OSD 1 故障
────────────────────────────────────────────────────────────────────────
┌─────────┐          ┌─────────┐        ┌─────────┐
│  OSD 0  │    ✗     │  OSD 1  │  心跳  │  OSD 2  │
│(Primary)│◄────✗────│  (宕机)  │◄──────►│(Replica)│
└────┬────┘          └─────────┘        └────┬────┘
     │                                        │
     │ 1. 检测到 OSD 1 无响应                 │
     │                                        │
     │ 2. 报告给 Monitor                      │
     │ ────────────────────────────────────────►
     │                                   ┌─────────┐
     │                                   │ Monitor │
     │                                   └────┬────┘
     │                                        │
     │ 3. Monitor 标记 OSD 1 为 down          │
     │    更新 OSDMap                          │
     │    epoch++                              │
     │                                        │
     │ 4. 广播新的 OSDMap                      │
     │ ◄───────────────────────────────────────
     │                                        │
     └────────────────────────────────────────┘


时刻 T2: 恢复流程
────────────────────────────────────────────────────────────────────────
┌─────────┐          ┌─────────┐        ┌─────────┐
│  OSD 0  │          │  OSD 1  │        │  OSD 2  │
│(Primary)│          │  (down) │        │(Replica)│
└────┬────┘          └─────────┘        └────┬────┘
     │                                        │
     │ 5. 收到新的 OSDMap                      │
     │    Acting Set 改变: [0,1,2] → [0,2,3]  │
     │                                        │
     │ 6. 启动 Peering                        │
     │ ◄──────────────────────────────────────►
     │    确定权威日志                         │
     │    确定缺失对象                         │
     │                                        │
     │ 7. 启动 Recovery                       │
     │    从 OSD 0 复制缺失数据到 OSD 3        │
     │ ────────────────────────────────────────►
     │                                   ┌─────────┐
     │                                   │  OSD 3  │
     │                                   │  (新)   │
     │                                   └─────────┘
     │                                        │
     │ 8. Recovery 完成                        │
     │    PG 状态: active+clean               │
     │                                        │
     └────────────────────────────────────────┘


Monitor 故障与选举
────────────────────────────────────────────────────────────────────────

时刻 T0: 3 个 Monitor，mon-a 是 Leader
────────────────────────────────────────────────────────────────────────
         ┌─────────┐
         │  mon-a  │
         │ (Leader)│
         └────┬────┘
              │
    ┌─────────┴─────────┐
    │                   │
    ▼                   ▼
┌─────────┐        ┌─────────┐
│  mon-b  │        │  mon-c  │
│  (Peon) │◄──────►│  (Peon) │
└─────────┘        └─────────┘


时刻 T1: mon-a 故障
────────────────────────────────────────────────────────────────────────
         ┌─────────┐
         │  mon-a  │
         │  (宕机)  │
         └─────────┘
              ✗
    ┌─────────┴─────────┐
    ✗                   ✗
    ▼                   ▼
┌─────────┐        ┌─────────┐
│  mon-b  │        │  mon-c  │
│         │◄──────►│         │
└────┬────┘        └────┬────┘
     │                  │
     │ 1. 检测 Leader 失联
     │                  │
     │ 2. 启动选举       │
     │◄─────────────────►
     │  互相发送选举消息  │
     │                  │
     └──────────────────┘


时刻 T2: 选出新 Leader
────────────────────────────────────────────────────────────────────────
         ┌─────────┐
         │  mon-a  │
         │  (down) │
         └─────────┘

┌─────────┐        ┌─────────┐
│  mon-b  │        │  mon-c  │
│ (新Leader)│◄─────►│  (Peon) │
└────┬────┘        └────┬────┘
     │                  │
     │ 3. mon-b 当选 Leader
     │    epoch++        │
     │                  │
     │ 4. 恢复正常服务   │
     │    处理客户端请求  │
     │                  │
     └──────────────────┘


═══════════════════════════════════════════════════════════════════════════════
                    六、完整 I/O 路径
═══════════════════════════════════════════════════════════════════════════════

RBD 块设备写入路径
────────────────────────────────────────────────────────────────────────

应用层:    [虚拟机/数据库]
              │
              │ write()
              ▼
内核层:    [块设备层]
              │
              │ bio
              ▼
           [librbd]
              │
              │ 1. 将块 I/O 转换为对象 I/O
              │    块偏移 → 对象 ID + 对象内偏移
              │    4MB 块 → rados_write(obj_name, offset, data)
              │
              ▼
           [librados]
              │
              │ 2. 获取 OSDMap
              │    从本地缓存或 Monitor
              │
              │ 3. CRUSH 计算
              │    pool_id + pg_id + object_id → [OSD list]
              │    pg_hash(object_id) → PG
              │    CRUSH(PG, OSDMap) → Acting Set [0, 5, 9]
              │
              ▼
网络层:    [Messenger]
              │
              │ 4. 发送 MOSDOp 消息到 Primary OSD (OSD 0)
              │
              ▼
OSD层:     [OSD 0 - Primary]
              │
              │ 5. 接收请求
              │    ├─ OpScheduler (调度)
              │    ├─ PG::do_request()
              │    └─ PrimaryLogPG::do_osd_ops()
              │
              │ 6. 写入流程
              │    ├─ 追加 PG Log
              │    ├─ 复制到 Replica (OSD 5, 9)
              │    │   └─ MOSDRepOp 消息
              │    └─ 等待 Replica ACK
              │
              ▼
存储层:    [BlueStore]
              │
              │ 7. 写入 BlueStore
              │    ├─ 数据 → 块设备 (BlueFS)
              │    └─ 元数据 → RocksDB
              │
              ▼
硬件层:    [SSD/HDD]
              │
              └─ 持久化完成


CephFS 文件读取路径
────────────────────────────────────────────────────────────────────────

应用层:    [用户程序: cat file.txt]
              │
              │ read()
              ▼
FUSE层:    [ceph-fuse]
              │
              │ 1. FUSE 回调: ll_read()
              │
              ▼
客户端层:  [Client]
              │
              │ 2. 查询元数据
              │    ├─ 本地缓存查找
              │    └─ 如果缓存未命中 → 请求 MDS
              │
              ▼
MDS交互:   [ceph-mds]
              │
              │ 3. MDS 返回文件 inode
              │    ├─ 文件大小
              │    ├─ 对象布局 (object layout)
              │    │   stripe_unit=4MB
              │    │   stripe_count=1
              │    │   object_size=4MB
              │    └─ 对象名称列表
              │        file.txt → [10000000000.00000000, ...]
              │
              ▼
对象层:    [librados]
              │
              │ 4. 读取对象数据
              │    对于每个对象:
              │    ├─ CRUSH 计算 → OSD
              │    └─ rados_read(object_id, offset, length)
              │
              ▼
OSD交互:   [ceph-osd]
              │
              │ 5. 从 OSD 读取
              │    ├─ 优先从 Primary 读
              │    └─ 或负载均衡到 Replica
              │
              ▼
返回:      [数据返回到应用]
              │
              └─ 用户程序收到数据


═══════════════════════════════════════════════════════════════════════════════
                    七、测试工具使用 (ceph-syn)
═══════════════════════════════════════════════════════════════════════════════

ceph-syn 架构
────────────────────────────────────────────────────────────────────────

┌─────────────────────────────────────────────────────────────────┐
│                       ceph-syn                                   │
│                                                                  │
│  ┌────────────┐  ┌────────────┐  ┌────────────┐                │
│  │SynClient 0 │  │SynClient 1 │  │SynClient 2 │ ... N 个客户端 │
│  │            │  │            │  │            │                │
│  └─────┬──────┘  └─────┬──────┘  └─────┬──────┘                │
│        │               │               │                        │
│        └───────────────┴───────────────┘                        │
│                        │                                        │
│                        ▼                                        │
│               ┌─────────────────┐                               │
│               │  工作负载生成   │                               │
│               ├─────────────────┤                               │
│               │ • makedir       │                               │
│               │ • makefiles     │                               │
│               │ • readfile      │                               │
│               │ • writefile     │                               │
│               │ • walk          │                               │
│               └─────────────────┘                               │
└──────────────────────┬──────────────────────────────────────────┘
                       │
                       ▼
            ┌─────────────────────┐
            │    Ceph 集群         │
            │  ┌─────┐  ┌─────┐   │
            │  │ MDS │  │ OSD │   │
            │  └─────┘  └─────┘   │
            └─────────────────────┘


测试场景示例
────────────────────────────────────────────────────────────────────────

场景 1: 元数据性能测试
────────────────────────────────────────────────────────────────────────
命令: ceph-syn --num_client 10 --syn makedirs 0 10 1000

执行流程:
  1. 创建 10 个 SyntheticClient
  2. 每个客户端创建 10 个目录
  3. 每个目录下创建 1000 个子目录
  4. 总共: 10 x 10 x 1000 = 100,000 个目录

         ┌──────────┐
         │   MDS    │
         └────┬─────┘
              │ 同时处理
    ┌─────────┼─────────┬─────────┐
    ▼         ▼         ▼         ▼
 Client0   Client1   Client2   Client9
 创建1万   创建1万   创建1万   创建1万
 个目录    个目录    个目录    个目录


场景 2: 数据 I/O 性能测试
────────────────────────────────────────────────────────────────────────
命令: ceph-syn --num_client 5 --syn writefile 0 1073741824 1048576

执行流程:
  1. 创建 5 个 SyntheticClient
  2. 每个客户端写入 1GB 数据
  3. 块大小 1MB (1048576 字节)
  4. 总吞吐量: 5GB

         ┌──────────────────────────┐
         │       OSD 集群            │
         └────────────┬─────────────┘
                      │ 并发写入
    ┌─────────────────┼─────────────┬─────┐
    ▼                 ▼             ▼     ▼
 Client0           Client1       Client2  ...
 写 1GB            写 1GB        写 1GB


═══════════════════════════════════════════════════════════════════════════════
                    八、总结：完整系统视图
═══════════════════════════════════════════════════════════════════════════════

                        Ceph 分布式存储集群
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃                         控制平面                                     ┃
┃  ┌─────────────────────────────────────────────────────────────┐   ┃
┃  │              Monitor 集群 (ceph-mon)                         │   ┃
┃  │  • Paxos 共识  • 集群地图管理  • 认证  • 健康监控           │   ┃
┃  └────────────────────────┬────────────────────────────────────┘   ┃
┃                           │                                         ┃
┃  ┌────────────────────────┴────────────────────────────────────┐   ┃
┃  │              Manager 集群 (ceph-mgr)                         │   ┃
┃  │  • Dashboard  • Prometheus  • Balancer  • 插件管理          │   ┃
┃  └─────────────────────────────────────────────────────────────┘   ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
                                    │
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃                         数据平面                                     ┃
┃                                                                      ┃
┃  ┌─────────────────────────────────────────────────────────────┐   ┃
┃  │                   OSD 集群 (ceph-osd)                        │   ┃
┃  │  • 数据存储  • 复制/纠删码  • 恢复  • Scrubbing              │   ┃
┃  │  • BlueStore  • CRUSH  • PG 管理                             │   ┃
┃  └─────────────────────────────────────────────────────────────┘   ┃
┃                                                                      ┃
┃  ┌─────────────────────────────────────────────────────────────┐   ┃
┃  │            元数据服务器 (ceph-mds) - 仅 CephFS               │   ┃
┃  │  • 文件系统元数据  • 目录树  • 动态负载均衡                 │   ┃
┃  └─────────────────────────────────────────────────────────────┘   ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
                                    │
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃                         客户端                                       ┃
┃                                                                      ┃
┃  ┌────────────┐  ┌────────────┐  ┌────────────┐  ┌─────────────┐  ┃
┃  │ ceph-fuse  │  │   librbd   │  │  librados  │  │   ceph-syn  │  ┃
┃  │  (CephFS)  │  │  (块设备)  │  │  (对象)    │  │   (测试)    │  ┃
┃  └────────────┘  └────────────┘  └────────────┘  └─────────────┘  ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

版本符号 (ceph_ver): 确保所有组件版本一致，防止版本冲突

