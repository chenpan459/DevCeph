╔═══════════════════════════════════════════════════════════════════════════╗
║                OSDService 创建流程可视化图                                ║
╚═══════════════════════════════════════════════════════════════════════════╝

═══════════════════════════════════════════════════════════════════════════════
                    一、完整创建流程
═══════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────┐
│ 程序启动：ceph-osd                                                       │
│ 入口：src/ceph_osd.cc::main()                                           │
└────────────────────────┬────────────────────────────────────────────────┘
                         │
                         ▼
┌─────────────────────────────────────────────────────────────────────────┐
│ 步骤 1：初始化 CephContext                                               │
│ ────────────────────────────────────────────────────────────────────    │
│   auto cct = global_init(                                               │
│     nullptr,                                                             │
│     args,                                                                │
│     CEPH_ENTITY_TYPE_OSD,                                                │
│     CODE_ENVIRONMENT_DAEMON,                                             │
│     0                                                                    │
│   );                                                                     │
└────────────────────────┬────────────────────────────────────────────────┘
                         │
                         ▼
┌─────────────────────────────────────────────────────────────────────────┐
│ 步骤 2：解析命令行参数                                                   │
│ ────────────────────────────────────────────────────────────────────    │
│   • whoami (OSD ID): 从 -i 参数获取                                     │
│   • data_path: 从 --osd-data 获取                                       │
│   • journal_path: 从 --osd-journal 获取                                 │
│                                                                          │
│   示例：ceph-osd -i 0 --osd-data /var/lib/ceph/osd/ceph-0              │
│          → whoami = 0                                                    │
└────────────────────────┬────────────────────────────────────────────────┘
                         │
                         ▼
┌─────────────────────────────────────────────────────────────────────────┐
│ 步骤 3：创建 ObjectStore                                                 │
│ ────────────────────────────────────────────────────────────────────    │
│   std::unique_ptr<ObjectStore> store =                                  │
│     ObjectStore::create(                                                │
│       cct,           // CephContext                                     │
│       store_type,    // "bluestore" 或 "filestore"                      │
│       data_path,     // /var/lib/ceph/osd/ceph-0                        │
│       journal_path,  // 日志路径                                         │
│       flags          // 创建标志                                         │
│     );                                                                   │
│                                                                          │
│   结果：store 指向 BlueStore 或 FileStore 对象                          │
└────────────────────────┬────────────────────────────────────────────────┘
                         │
                         ▼
┌─────────────────────────────────────────────────────────────────────────┐
│ 步骤 4：创建各种 Messenger                                               │
│ ────────────────────────────────────────────────────────────────────    │
│   ┌───────────────────────────────────────────────────────────────┐   │
│   │ ms_public (客户端网络)                                        │   │
│   │   - 监听：6800 端口                                           │   │
│   │   - 用于：客户端 I/O 请求                                     │   │
│   └───────────────────────────────────────────────────────────────┘   │
│                                                                          │
│   ┌───────────────────────────────────────────────────────────────┐   │
│   │ ms_cluster (集群内部网络)                                     │   │
│   │   - 监听：6801 端口                                           │   │
│   │   - 用于：OSD 间通信                                          │   │
│   └───────────────────────────────────────────────────────────────┘   │
│                                                                          │
│   ┌───────────────────────────────────────────────────────────────┐   │
│   │ ms_hb_front_client (心跳前端客户端)                           │   │
│   │   - 用于：发送心跳到其他 OSD                                  │   │
│   └───────────────────────────────────────────────────────────────┘   │
│                                                                          │
│   ┌───────────────────────────────────────────────────────────────┐   │
│   │ ms_hb_back_client (心跳后端客户端)                            │   │
│   │   - 用于：发送心跳到其他 OSD（后端网络）                      │   │
│   └───────────────────────────────────────────────────────────────┘   │
│                                                                          │
│   ┌───────────────────────────────────────────────────────────────┐   │
│   │ ms_hb_front_server (心跳前端服务端)                           │   │
│   │   - 用于：接收其他 OSD 的心跳                                 │   │
│   └───────────────────────────────────────────────────────────────┘   │
│                                                                          │
│   ┌───────────────────────────────────────────────────────────────┐   │
│   │ ms_hb_back_server (心跳后端服务端)                            │   │
│   │   - 用于：接收其他 OSD 的心跳（后端网络）                     │   │
│   └───────────────────────────────────────────────────────────────┘   │
│                                                                          │
│   ┌───────────────────────────────────────────────────────────────┐   │
│   │ ms_objecter (Objecter 网络)                                   │   │
│   │   - 用于：Cache Tier 访问基础池                               │   │
│   └───────────────────────────────────────────────────────────────┘   │
└────────────────────────┬────────────────────────────────────────────────┘
                         │
                         ▼
┌─────────────────────────────────────────────────────────────────────────┐
│ 步骤 5：创建 MonClient                                                   │
│ ────────────────────────────────────────────────────────────────────    │
│   MonClient mc(g_ceph_context, poolctx);                                │
│   mc.build_initial_monmap();                                            │
│                                                                          │
│   作用：与 Monitor 集群通信                                              │
│   ├─ 获取 OSDMap                                                        │
│   ├─ 报告 OSD 状态                                                      │
│   └─ 接收 OSDMap 更新                                                   │
└────────────────────────┬────────────────────────────────────────────────┘
                         │
                         ▼
┌─────────────────────────────────────────────────────────────────────────┐
│ 步骤 6：★★★ 创建 OSD 对象 ★★★                                          │
│ ────────────────────────────────────────────────────────────────────    │
│                                                                          │
│   osdptr = new OSD(                                                     │
│     g_ceph_context,      // CephContext                                 │
│     std::move(store),    // ObjectStore (BlueStore/FileStore)           │
│     whoami,              // OSD ID (如 0)                               │
│     ms_cluster,          // 集群 Messenger                              │
│     ms_public,           // 公共 Messenger                              │
│     ms_hb_front_client,  // 心跳前端客户端                              │
│     ms_hb_back_client,   // 心跳后端客户端                              │
│     ms_hb_front_server,  // 心跳前端服务端                              │
│     ms_hb_back_server,   // 心跳后端服务端                              │
│     ms_objecter,         // Objecter Messenger                          │
│     &mc,                 // MonClient                                   │
│     data_path,           // 数据路径                                     │
│     journal_path,        // 日志路径                                     │
│     poolctx              // I/O 上下文池                                │
│   );                                                                     │
│                                                                          │
│   这一步触发 OSD 构造函数 ↓                                              │
└────────────────────────┬────────────────────────────────────────────────┘
                         │
                         ▼
┌═════════════════════════════════════════════════════════════════════════┐
║ 步骤 7：OSD 构造函数执行                                                 ║
║ ════════════════════════════════════════════════════════════════════    ║
║                                                                          ║
║ 文件：src/osd/OSD.cc                                                    ║
║ 行号：2327                                                               ║
║                                                                          ║
║ OSD::OSD(                                                                ║
║   CephContext *cct_,                                                    ║
║   std::unique_ptr<ObjectStore> store_,                                  ║
║   int id,                                                                ║
║   Messenger *internal_messenger,                                        ║
║   Messenger *external_messenger,                                        ║
║   Messenger *hb_client_front,                                           ║
║   Messenger *hb_client_back,                                            ║
║   Messenger *hb_front_serverm,                                          ║
║   Messenger *hb_back_serverm,                                           ║
║   Messenger *osdc_messenger,                                            ║
║   MonClient *mc,                                                        ║
║   const std::string &dev,                                               ║
║   const std::string &jdev,                                              ║
║   ceph::async::io_context_pool& poolctx                                 ║
║ ) :                                                                      ║
║   Dispatcher(cct_),                                      // 基类初始化   ║
║   tick_timer(cct, osd_lock),                            // 定时器       ║
║   tick_timer_without_osd_lock(cct, tick_timer_lock),    // 定时器       ║
║   cluster_messenger(internal_messenger),                 // 保存 Messenger║
║   client_messenger(external_messenger),                  // 保存 Messenger║
║   objecter_messenger(osdc_messenger),                    // 保存 Messenger║
║   monc(mc),                                              // 保存 MonClient║
║   logger(create_logger()),                               // 创建日志     ║
║   recoverystate_perf(create_recoverystate_perf()),       // 性能计数器   ║
║   store(std::move(store_)),                              // 保存 ObjectStore║
║   whoami(id),                                            // 保存 OSD ID  ║
║   ... (省略大量初始化) ...                                              ║
║                                                                          ║
║   ┌────────────────────────────────────────────────────────────────┐   ║
║   │ ★★★ 第 2386 行：OSDService 成员初始化 ★★★                     │   ║
║   │                                                                 │   ║
║   │ service(this, poolctx)                                         │   ║
║   │   │                                                             │   ║
║   │   │ 参数说明：                                                  │   ║
║   │   ├─ this: OSD 对象自己的指针                                  │   ║
║   │   └─ poolctx: I/O 上下文池（用于异步操作）                     │   ║
║   │                                                                 │   ║
║   │ 这会调用 OSDService 的构造函数 ↓                               │   ║
║   └────────────────────────────────────────────────────────────────┘   ║
║                                                                          ║
║ {                                                                        ║
║   // OSD 构造函数体                                                     ║
║   monc->set_messenger(client_messenger);                                ║
║   op_tracker.set_complaint_and_threshold(...);                          ║
║   // ... 其他初始化 ...                                                 ║
║                                                                          ║
║   // 创建 OSD Shards                                                    ║
║   num_shards = get_num_op_shards();                                     ║
║   for (uint32_t i = 0; i < num_shards; i++) {                           ║
║     OSDShard *one_shard = new OSDShard(i, cct, this, ...);              ║
║     shards.push_back(one_shard);                                        ║
║   }                                                                      ║
║ }                                                                        ║
╚════════════════════════┬════════════════════════════════════════════════╝
                         │
                         ▼
┌═════════════════════════════════════════════════════════════════════════┐
║ 步骤 8：★★★ OSDService 构造函数执行 ★★★                               ║
║ ════════════════════════════════════════════════════════════════════    ║
║                                                                          ║
║ 文件：src/osd/OSD.cc                                                    ║
║ 行号：234                                                                ║
║                                                                          ║
║ OSDService::OSDService(                                                 ║
║   OSD *osd,                            // OSD 对象指针                  ║
║   ceph::async::io_context_pool& poolctx // I/O 上下文池                ║
║ ) :                                                                      ║
║   // ══════════════════════════════════════════════════════════════    ║
║   // 从 OSD 对象获取引用（避免重复）                                    ║
║   // ══════════════════════════════════════════════════════════════    ║
║   osd(osd),                            // 保存 OSD 指针                 ║
║   cct(osd->cct),                       // 引用 OSD 的 CephContext       ║
║   whoami(osd->whoami),                 // 引用 OSD ID                   ║
║   store(osd->store.get()),             // 引用 ObjectStore              ║
║   log_client(osd->log_client),         // 引用 LogClient                ║
║   clog(osd->clog),                     // 引用 LogChannel               ║
║   pg_recovery_stats(osd->pg_recovery_stats), // 引用恢复统计            ║
║   cluster_messenger(osd->cluster_messenger), // 引用集群 Messenger      ║
║   client_messenger(osd->client_messenger),   // 引用客户端 Messenger    ║
║   logger(osd->logger),                 // 引用性能计数器                 ║
║   recoverystate_perf(osd->recoverystate_perf), // 引用恢复状态计数器    ║
║   monc(osd->monc),                     // 引用 MonClient                ║
║                                                                          ║
║   // ══════════════════════════════════════════════════════════════    ║
║   // 初始化配置缓存                                                      ║
║   // ══════════════════════════════════════════════════════════════    ║
║   osd_max_object_size(cct->_conf, "osd_max_object_size"),              ║
║   osd_skip_data_digest(cct->_conf, "osd_skip_data_digest"),            ║
║                                                                          ║
║   // ══════════════════════════════════════════════════════════════    ║
║   // 初始化锁                                                            ║
║   // ══════════════════════════════════════════════════════════════    ║
║   publish_lock{ceph::make_mutex("OSDService::publish_lock")},          ║
║   pre_publish_lock{ceph::make_mutex("OSDService::pre_publish_lock")},  ║
║                                                                          ║
║   // ══════════════════════════════════════════════════════════════    ║
║   // 初始化 Scrub 服务                                                  ║
║   // ══════════════════════════════════════════════════════════════    ║
║   m_osd_scrub{cct, *this, cct->_conf},                                 ║
║                                                                          ║
║   // ══════════════════════════════════════════════════════════════    ║
║   // 初始化 Agent（Cache Tier 管理）                                    ║
║   // ══════════════════════════════════════════════════════════════    ║
║   agent_valid_iterator(false),                                          ║
║   agent_ops(0),                                                          ║
║   flush_mode_high_count(0),                                             ║
║   agent_active(true),                                                   ║
║   agent_thread(this),              // Agent 线程                         ║
║   agent_stop_flag(false),                                               ║
║   agent_timer(osd->client_messenger->cct, agent_timer_lock),           ║
║                                                                          ║
║   // ══════════════════════════════════════════════════════════════    ║
║   // 保存 I/O 上下文池                                                  ║
║   // ══════════════════════════════════════════════════════════════    ║
║   poolctx(poolctx),                                                     ║
║                                                                          ║
║   // ══════════════════════════════════════════════════════════════    ║
║   // 创建 Objecter（用于 Cache Tier 访问基础池）                        ║
║   // ══════════════════════════════════════════════════════════════    ║
║   objecter(make_unique<Objecter>(                                       ║
║     osd->client_messenger->cct,    // CephContext                       ║
║     osd->objecter_messenger,       // Objecter Messenger                ║
║     osd->monc,                     // MonClient                         ║
║     poolctx                        // I/O 上下文池                       ║
║   )),                                                                    ║
║                                                                          ║
║   // ══════════════════════════════════════════════════════════════    ║
║   // 定时器                                                              ║
║   // ══════════════════════════════════════════════════════════════    ║
║   watch_timer(osd->client_messenger->cct, watch_lock),                 ║
║   recovery_request_timer(cct, recovery_request_lock, false),           ║
║   sleep_timer(cct, sleep_lock, false),                                 ║
║                                                                          ║
║   // ══════════════════════════════════════════════════════════════    ║
║   // Reserver（预留机制）                                               ║
║   // ══════════════════════════════════════════════════════════════    ║
║   reserver_finisher(cct),                                               ║
║   local_reserver(cct, &reserver_finisher,                              ║
║                  cct->_conf->osd_max_backfills,                        ║
║                  cct->_conf->osd_min_recovery_priority),               ║
║   remote_reserver(cct, &reserver_finisher,                             ║
║                   cct->_conf->osd_max_backfills,                       ║
║                   cct->_conf->osd_min_recovery_priority),              ║
║   snap_reserver(cct, &reserver_finisher,                               ║
║                 cct->_conf->osd_max_trimming_pgs),                     ║
║   scrub_reserver(cct, &reserver_finisher,                              ║
║                  cct->_conf->osd_max_scrubs),                          ║
║                                                                          ║
║   // ══════════════════════════════════════════════════════════════    ║
║   // Map 缓存                                                            ║
║   // ══════════════════════════════════════════════════════════════    ║
║   map_cache(cct, cct->_conf->osd_map_cache_size),                      ║
║   map_bl_cache(cct->_conf->osd_map_cache_size),                        ║
║   map_bl_inc_cache(cct->_conf->osd_map_cache_size),                    ║
║                                                                          ║
║   // ... 其他初始化 ...                                                 ║
║   boot_epoch(0),                                                         ║
║   up_epoch(0),                                                           ║
║   bind_epoch(0)                                                          ║
║ {                                                                        ║
║   // ══════════════════════════════════════════════════════════════    ║
║   // 构造函数体                                                          ║
║   // ══════════════════════════════════════════════════════════════    ║
║                                                                          ║
║   // 1. 初始化 Objecter                                                 ║
║   objecter->init();                                                     ║
║                                                                          ║
║   // 2. 创建 Objecter Finishers                                         ║
║   for (int i = 0; i < m_objecter_finishers; i++) {                      ║
║     ostringstream str;                                                  ║
║     str << "objecter-finisher-" << i;                                  ║
║     auto fin = make_unique<Finisher>(                                   ║
║       osd->client_messenger->cct,                                       ║
║       str.str(),                                                        ║
║       "finisher"                                                        ║
║     );                                                                   ║
║     objecter_finishers.push_back(std::move(fin));                      ║
║   }                                                                      ║
║ }                                                                        ║
╚════════════════════════┬════════════════════════════════════════════════╝
                         │
                         ▼
                   OSDService 创建完成 ✓
                         │
                         │ 返回到 OSD 构造函数
                         ▼
                   OSD 对象创建完成 ✓


═══════════════════════════════════════════════════════════════════════════════
                    二、类关系图
═══════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────┐
│                             OSD 类                                       │
│                        (src/osd/OSD.h)                                   │
│                                                                          │
│  ┌────────────────────────────────────────────────────────────────┐    │
│  │ 成员变量                                                        │    │
│  │ ──────────────────────────────────────────────────────────     │    │
│  │ CephContext *cct;                                              │    │
│  │ int whoami;                                                     │    │
│  │ std::unique_ptr<ObjectStore> store;                            │    │
│  │ Messenger *cluster_messenger;                                  │    │
│  │ Messenger *client_messenger;                                   │    │
│  │ MonClient *monc;                                               │    │
│  │ PerfCounters *logger;                                          │    │
│  │ PerfCounters *recoverystate_perf;                              │    │
│  │ LogClient log_client;                                          │    │
│  │ LogChannelRef clog;                                            │    │
│  │ PGRecoveryStats pg_recovery_stats;                             │    │
│  │ ... (大量其他成员)                                             │    │
│  │                                                                 │    │
│  │ ┌─────────────────────────────────────────────────────────┐   │    │
│  │ │ ★★★ OSDService 成员变量 ★★★                            │   │    │
│  │ │ OSDService service;   // 第 2051 行                     │   │    │
│  │ └─────────────────────────────────────────────────────────┘   │    │
│  └────────────────────────────────────────────────────────────────┘    │
│                                                                          │
│  ┌────────────────────────────────────────────────────────────────┐    │
│  │ 构造函数                                                        │    │
│  │ ──────────────────────────────────────────────────────────     │    │
│  │ OSD(                                                            │    │
│  │   CephContext *cct_,                                           │    │
│  │   std::unique_ptr<ObjectStore> store_,                         │    │
│  │   int id,                                                       │    │
│  │   Messenger *internal_messenger,                               │    │
│  │   Messenger *external_messenger,                               │    │
│  │   Messenger *hb_client_front,                                  │    │
│  │   Messenger *hb_client_back,                                   │    │
│  │   Messenger *hb_front_serverm,                                 │    │
│  │   Messenger *hb_back_serverm,                                  │    │
│  │   Messenger *osdc_messenger,                                   │    │
│  │   MonClient *mc,                                               │    │
│  │   const std::string &dev,                                      │    │
│  │   const std::string &jdev,                                     │    │
│  │   ceph::async::io_context_pool& poolctx                        │    │
│  │ );                                                              │    │
│  └────────────────────────────────────────────────────────────────┘    │
│                                                                          │
│  ┌────────────────────────────────────────────────────────────────┐    │
│  │ 主要方法                                                        │    │
│  │ ──────────────────────────────────────────────────────────     │    │
│  │ int pre_init();                                                │    │
│  │ int init();                                                     │    │
│  │ void final_init();                                             │    │
│  │ void shutdown();                                               │    │
│  │ void handle_osd_map(...);                                      │    │
│  │ void ms_dispatch(Message *m);  // 消息分发                     │    │
│  │ ... (大量方法)                                                 │    │
│  └────────────────────────────────────────────────────────────────┘    │
└──────────────────────────┬───────────────────────────────────────────────┘
                           │
                           │ 包含（组合关系）
                           │
                           ▼
┌─────────────────────────────────────────────────────────────────────────┐
│                          OSDService 类                                   │
│                       (src/osd/OSD.h)                                    │
│                                                                          │
│  ┌────────────────────────────────────────────────────────────────┐    │
│  │ 成员变量（引用 OSD 的成员）                                     │    │
│  │ ──────────────────────────────────────────────────────────     │    │
│  │ OSD *osd;                        // OSD 对象指针                │    │
│  │ CephContext *cct;                // 引用自 osd->cct            │    │
│  │ const int whoami;                // 引用自 osd->whoami         │    │
│  │ ObjectStore * const store;       // 引用自 osd->store          │    │
│  │ LogClient &log_client;           // 引用自 osd->log_client     │    │
│  │ LogChannelRef clog;              // 引用自 osd->clog           │    │
│  │ PGRecoveryStats &pg_recovery_stats; // 引用自 osd->pg_recovery_stats│
│  │ Messenger *&cluster_messenger;   // 引用自 osd->cluster_messenger│   │
│  │ Messenger *&client_messenger;    // 引用自 osd->client_messenger │   │
│  │ PerfCounters *&logger;           // 引用自 osd->logger         │    │
│  │ PerfCounters *&recoverystate_perf; // 引用自 osd->recoverystate_perf│
│  │ MonClient *&monc;                // 引用自 osd->monc           │    │
│  └────────────────────────────────────────────────────────────────┘    │
│                                                                          │
│  ┌────────────────────────────────────────────────────────────────┐    │
│  │ OSDService 专有成员                                             │    │
│  │ ──────────────────────────────────────────────────────────     │    │
│  │ OSDMapRef osdmap;                // 当前 OSDMap                 │    │
│  │ OSDMapRef next_osdmap;           // 下一个 OSDMap               │    │
│  │ std::unique_ptr<Objecter> objecter; // Objecter（Cache Tier）  │    │
│  │ OsdScrub m_osd_scrub;            // Scrub 服务                  │    │
│  │ AsyncReserver local_reserver;    // 本地恢复预留                │    │
│  │ AsyncReserver remote_reserver;   // 远程恢复预留                │    │
│  │ AsyncReserver snap_reserver;     // 快照修剪预留                │    │
│  │ AsyncReserver scrub_reserver;    // Scrub 预留                  │    │
│  │ SharedLRU map_cache;             // OSDMap 缓存                 │    │
│  │ ... (大量服务相关成员)                                          │    │
│  └────────────────────────────────────────────────────────────────┘    │
│                                                                          │
│  ┌────────────────────────────────────────────────────────────────┐    │
│  │ 构造函数                                                        │    │
│  │ ──────────────────────────────────────────────────────────     │    │
│  │ explicit OSDService(                                           │    │
│  │   OSD *osd,                                                     │    │
│  │   ceph::async::io_context_pool& poolctx                        │    │
│  │ );                                                              │    │
│  └────────────────────────────────────────────────────────────────┘    │
│                                                                          │
│  ┌────────────────────────────────────────────────────────────────┐    │
│  │ 主要方法（为 PG 提供服务）                                      │    │
│  │ ──────────────────────────────────────────────────────────     │    │
│  │ // OSDMap 管理                                                  │    │
│  │ OSDMapRef get_osdmap();                                        │    │
│  │ void publish_map(OSDMapRef map);                               │    │
│  │ void pre_publish_map(OSDMapRef map);                           │    │
│  │                                                                 │    │
│  │ // 消息发送                                                     │    │
│  │ void send_message_osd_cluster(...);                            │    │
│  │ ConnectionRef get_con_osd_cluster(...);                        │    │
│  │                                                                 │    │
│  │ // 操作队列                                                     │    │
│  │ void enqueue_back(OpSchedulerItem&& qi);                       │    │
│  │ void enqueue_front(OpSchedulerItem&& qi);                      │    │
│  │                                                                 │    │
│  │ // Scrub 服务                                                   │    │
│  │ OsdScrub& get_scrub_services();                                │    │
│  │ AsyncReserver& get_scrub_reserver();                           │    │
│  │                                                                 │    │
│  │ // 恢复管理                                                     │    │
│  │ void queue_recovery_after_sleep(...);                          │    │
│  │ ... (大量服务方法)                                             │    │
│  └────────────────────────────────────────────────────────────────┘    │
└─────────────────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════════════════════
                    三、对象依赖关系
═══════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────┐
│                         全局对象                                         │
└─────────────────────────┬───────────────────────────────────────────────┘
                          │
          ┌───────────────┼───────────────┬──────────────┐
          │               │               │              │
          ▼               ▼               ▼              ▼
    ┌──────────┐    ┌──────────┐   ┌──────────┐   ┌──────────┐
    │CephContext│   │Messenger │   │Messenger │   │ MonClient│
    │   (cct)   │   │ (public) │   │(cluster) │   │   (mc)   │
    └─────┬────┘    └────┬─────┘   └────┬─────┘   └────┬─────┘
          │              │              │              │
          └──────────────┼──────────────┼──────────────┘
                         │              │
                         ▼              │
                   ┌──────────┐         │
                   │ObjectStore│        │
                   │  (store)  │        │
                   └─────┬─────┘        │
                         │              │
                         └──────────────┤
                                        │
                                        ▼
                              ┌──────────────────┐
                              │    OSD 对象      │
                              │    (osdptr)      │
                              └────────┬─────────┘
                                       │
                                       │ 包含（成员变量）
                                       ▼
                              ┌──────────────────┐
                              │   OSDService     │
                              │    (service)     │
                              └────────┬─────────┘
                                       │
                                       │ 被使用
                                       ▼
                              ┌──────────────────┐
                              │   PG 对象们      │
                              │                  │
                              │ PG 1, PG 2, ...  │
                              └──────────────────┘


═══════════════════════════════════════════════════════════════════════════════
                    四、生命周期
═══════════════════════════════════════════════════════════════════════════════

创建：
────────────────────────────────────────────────────────────────────────
main() 函数中
  └─ new OSD(...)
      └─ OSD 构造函数
          └─ service(this, poolctx)  // 初始化列表
              └─ OSDService 构造函数

运行：
────────────────────────────────────────────────────────────────────────
OSD 运行期间
  ├─ OSDService 提供各种服务
  ├─ PG 通过 OSDService 发送消息
  ├─ PG 通过 OSDService 获取 OSDMap
  ├─ PG 通过 OSDService 预留恢复资源
  └─ PG 通过 OSDService 调度 Scrub

销毁：
────────────────────────────────────────────────────────────────────────
main() 函数结束时
  └─ delete osdptr
      └─ OSD 析构函数
          └─ service 成员自动析构
              └─ OSDService 析构函数


═══════════════════════════════════════════════════════════════════════════════
                    五、总结
═══════════════════════════════════════════════════════════════════════════════

创建者：
────────────────────────────────────────────────────────────────────────
✓ OSDService 由 OSD 类创建
✓ 作为 OSD 的成员变量存在
✓ 不是独立创建的对象

创建时机：
────────────────────────────────────────────────────────────────────────
✓ 在 OSD 对象构造时
✓ 通过 OSD 构造函数的初始化列表
✓ 自动调用 OSDService 构造函数

创建方式：
────────────────────────────────────────────────────────────────────────
✓ 成员变量初始化：service(this, poolctx)
✓ 传递 OSD 自身指针（this）
✓ 传递 I/O 上下文池（poolctx）

设计模式：
────────────────────────────────────────────────────────────────────────
✓ 组合模式：OSD 包含 OSDService
✓ 服务模式：OSDService 为 PG 提供服务
✓ 引用传递：避免重复，保持一致性

生命周期：
────────────────────────────────────────────────────────────────────────
✓ 与 OSD 对象绑定
✓ OSD 创建时创建
✓ OSD 销毁时自动销毁

关键代码位置：
────────────────────────────────────────────────────────────────────────
✓ src/ceph_osd.cc:699      → new OSD(...)
✓ src/osd/OSD.cc:2327      → OSD::OSD(...) 构造函数
✓ src/osd/OSD.cc:2386      → service(this, poolctx)
✓ src/osd/OSD.cc:234       → OSDService::OSDService(...)
✓ src/osd/OSD.h:2051       → OSDService service; 成员声明
✓ src/osd/OSD.h:98         → class OSDService 定义

