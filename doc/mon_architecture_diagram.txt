╔═══════════════════════════════════════════════════════════════════════════╗
║                    Ceph Monitor 架构全景图                                 ║
╚═══════════════════════════════════════════════════════════════════════════╝

┌────────────────────────────────────────────────────────────────────────────┐
│                            客户端层                                         │
│  ┌──────────┐  ┌──────────┐  ┌──────────┐  ┌──────────┐                 │
│  │  ceph    │  │   OSD    │  │   MDS    │  │  librados│                 │
│  │  命令行  │  │  守护进程 │  │  守护进程 │  │  客户端  │                 │
│  └────┬─────┘  └────┬─────┘  └────┬─────┘  └────┬─────┘                 │
└───────┼─────────────┼─────────────┼─────────────┼────────────────────────┘
        │             │             │             │
        └─────────────┴─────────────┴─────────────┘
                      │
        ╔═════════════╧═════════════╗
        ║    Messenger (消息层)      ║
        ╚═════════════╤═════════════╝
                      │
┌─────────────────────┼─────────────────────────────────────────────────────┐
│                     ▼                                                       │
│  ┌─────────────────────────────────────────────────────────────────┐      │
│  │              Monitor::ms_dispatch() 消息入口                     │      │
│  │  • 会话管理                                                       │      │
│  │  • 认证检查                                                       │      │
│  │  • 消息路由                                                       │      │
│  └───┬─────────────────────────────────────┬───────────────────────┘      │
│      │                                     │                               │
│      ▼                                     ▼                               │
│  ┌──────────────────┐              ┌──────────────────┐                  │
│  │ handle_command() │              │  dispatch_op()   │                  │
│  │  命令处理器      │              │  操作分发器       │                  │
│  └────┬─────────────┘              └────┬─────────────┘                  │
│       │                                 │                                 │
│       └─────────────────┬───────────────┘                                 │
│                         ▼                                                  │
│  ┌──────────────────────────────────────────────────────────────┐        │
│  │                   命令路由分发层                              │        │
│  │                                                                │        │
│  │  if (module == "osd")    → OSDMonitor::dispatch()            │        │
│  │  if (module == "mds")    → MDSMonitor::dispatch()            │        │
│  │  if (module == "auth")   → AuthMonitor::dispatch()           │        │
│  │  if (module == "mgr")    → MgrMonitor::dispatch()            │        │
│  │  if (module == "config") → ConfigMonitor::dispatch()         │        │
│  │  ...                                                           │        │
│  └────────────────────────────┬─────────────────────────────────┘        │
│                  Monitor       │                                           │
│                  (协调层)      │                                           │
└────────────────────────────────┼───────────────────────────────────────────┘
                                 │
        ┌────────────────────────┼────────────────────────┐
        │                        │                        │
        ▼                        ▼                        ▼
┌──────────────┐        ┌──────────────┐        ┌──────────────┐
│ OSDMonitor   │        │ MDSMonitor   │        │ AuthMonitor  │
│              │        │              │        │              │
│ • OSDMap     │        │ • MDSMap     │        │ • KeyServer  │
│ • CRUSH      │        │ • FSMap      │        │ • Global ID  │
│ • Pool 管理  │        │ • 故障转移   │        │ • 用户管理   │
└──────┬───────┘        └──────┬───────┘        └──────┬───────┘
       │                       │                       │
       └───────────────────────┼───────────────────────┘
                               │
                   ┌───────────┴───────────┐
                   │                       │
                   ▼                       ▼
        ┌─────────────────────┐  ┌─────────────────────┐
        │ preprocess_query()  │  │ prepare_update()    │
        │   (只读查询)        │  │   (写入操作)        │
        │                     │  │                     │
        │ • 不需要 Paxos      │  │ • 需要 Paxos        │
        │ • 直接返回结果      │  │ • 触发提案          │
        └─────────────────────┘  └──────────┬──────────┘
                                            │
                                 PaxosService
                                  (服务层)   │
┌────────────────────────────────────────────┼─────────────────────────────┐
│                                            ▼                              │
│                              propose_pending()                            │
│                                     │                                     │
│                                     ▼                                     │
│  ┌────────────────────────────────────────────────────────────┐         │
│  │                    Paxos (一致性层)                         │         │
│  │                                                              │         │
│  │  Leader 流程:                      Peon 流程:               │         │
│  │  ┌───────────────┐               ┌───────────────┐         │         │
│  │  │ 1. begin()    │               │ 1. 等待       │         │         │
│  │  │   开始提案    │               │   Leader 消息 │         │         │
│  │  └───────┬───────┘               └───────┬───────┘         │         │
│  │          │                               │                 │         │
│  │          ▼                               ▼                 │         │
│  │  ┌───────────────┐               ┌───────────────┐         │         │
│  │  │ 2. collect()  │──────────────>│ handle_       │         │         │
│  │  │   收集状态    │               │ collect()     │         │         │
│  │  └───────┬───────┘               └───────┬───────┘         │         │
│  │          │                               │                 │         │
│  │          │<──────────────────────────────┘                 │         │
│  │          │           返回 OP_LAST                          │         │
│  │          ▼                                                 │         │
│  │  ┌───────────────┐               ┌───────────────┐         │         │
│  │  │ 3. 等待多数派 │               │ handle_begin()│         │         │
│  │  │   LAST 响应   │──────────────>│   存储提案    │         │         │
│  │  └───────┬───────┘               └───────┬───────┘         │         │
│  │          │                               │                 │         │
│  │          │<──────────────────────────────┘                 │         │
│  │          │           返回 OP_ACCEPT                        │         │
│  │          ▼                                                 │         │
│  │  ┌───────────────┐               ┌───────────────┐         │         │
│  │  │ 4. commit()   │──────────────>│ handle_       │         │         │
│  │  │   提交事务    │               │ commit()      │         │         │
│  │  └───────┬───────┘               └───────┬───────┘         │         │
│  │          │                               │                 │         │
│  │          │        OP_COMMIT 广播         │                 │         │
│  │          │                               │                 │         │
│  │          └───────────────┬───────────────┘                 │         │
│  │                          │                                 │         │
│  │                          ▼                                 │         │
│  │               PaxosService::update_from_paxos()           │         │
│  │                    更新内存状态                            │         │
│  └────────────────────────────────────────────────────────────┘         │
│                                     │                                    │
│                  Paxos               │                                    │
│                (一致性层)            │                                    │
└─────────────────────────────────────┼────────────────────────────────────┘
                                      │
                         ┌────────────┴────────────┐
                         ▼                         ▼
              ┌─────────────────┐      ┌─────────────────┐
              │  encode_pending │      │  store->apply   │
              │   编码待提交数据│      │   应用事务       │
              └────────┬────────┘      └────────┬────────┘
                       │                        │
                       └────────────┬───────────┘
                                    ▼
┌────────────────────────────────────────────────────────────────────────────┐
│                      MonitorDBStore (存储层)                                │
│                                                                             │
│  ┌────────────────────────────────────────────────────────────────┐       │
│  │                     RocksDB (底层 KV 存储)                      │       │
│  │                                                                  │       │
│  │  命名空间结构:                                                   │       │
│  │  ┌──────────────────────────────────────────────────────┐      │       │
│  │  │ paxos/                                                │      │       │
│  │  │   first_committed → 100                              │      │       │
│  │  │   last_committed  → 150                              │      │       │
│  │  │   100 → [value_100]                                  │      │       │
│  │  │   ...                                                │      │       │
│  │  │   150 → [value_150]                                  │      │       │
│  │  ├──────────────────────────────────────────────────────┤      │       │
│  │  │ osdmap/                                              │      │       │
│  │  │   full_1    → [完整 OSDMap epoch 1]                 │      │       │
│  │  │   inc_1_2   → [增量 1→2]                            │      │       │
│  │  │   inc_2_3   → [增量 2→3]                            │      │       │
│  │  │   ...                                                │      │       │
│  │  ├──────────────────────────────────────────────────────┤      │       │
│  │  │ mdsmap/                                              │      │       │
│  │  │   ...                                                │      │       │
│  │  ├──────────────────────────────────────────────────────┤      │       │
│  │  │ auth/                                                │      │       │
│  │  │   global_id → 12345                                 │      │       │
│  │  │   keys      → [密钥数据]                            │      │       │
│  │  └──────────────────────────────────────────────────────┘      │       │
│  └────────────────────────────────────────────────────────────────┘       │
│                  MonitorDBStore                                            │
│                   (存储层)                                                 │
└────────────────────────────────────────────────────────────────────────────┘


┌────────────────────────────────────────────────────────────────────────────┐
│                             并行组件                                        │
│                                                                             │
│  ┌─────────────────────┐        ┌─────────────────────┐                   │
│  │   Elector (选举器)  │        │  MonMap (拓扑管理)  │                   │
│  │                     │        │                     │                   │
│  │  • ElectionLogic    │        │  • Monitor 列表     │                   │
│  │  • ConnectionTracker│        │  • 地址映射         │                   │
│  │  • 心跳检测         │        │  • epoch 版本       │                   │
│  │  • Leader 选举      │        │  • fsid             │                   │
│  └─────────────────────┘        └─────────────────────┘                   │
│                                                                             │
│  ┌─────────────────────┐        ┌─────────────────────┐                   │
│  │ Session (会话管理)  │        │  MgrClient (管理器) │                   │
│  │                     │        │                     │                   │
│  │  • 认证状态         │        │  • 连接 ceph-mgr    │                   │
│  │  • 权限信息         │        │  • 指标上报         │                   │
│  │  • Global ID        │        │  • 模块命令         │                   │
│  │  • 连接管理         │        │  • 告警推送         │                   │
│  └─────────────────────┘        └─────────────────────┘                   │
└────────────────────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════════════════════
                            关键数据流示例
═══════════════════════════════════════════════════════════════════════════════

示例: 创建 Pool 命令流程
────────────────────────────────────────────────────────────────────────────

1. 客户端
   $ ceph osd pool create mypool 128
      │
      ▼
2. Monitor 接收命令
   Monitor::handle_command()
   • 解析: prefix="osd pool create", name="mypool", pg_num=128
   • 权限检查: 需要 'w' 权限
      │
      ▼
3. 路由到服务
   osdmon()->dispatch(op)
      │
      ▼
4. 预处理 (只读检查)
   OSDMonitor::preprocess_command()
   • 检查 pool 名称是否冲突
   • 检查 pg_num 是否合法
   • 返回 false → 需要写入
      │
      ▼
5. 准备更新
   OSDMonitor::prepare_command()
   • pending_inc.new_pool_name["mypool"] = pool_id
   • pending_inc.new_pools[pool_id] = pg_pool_t(...)
   • propose_pending()
      │
      ▼
6. Paxos 提案
   Paxos::begin(proposal)
   ├─> Leader::collect()  → 收集状态
   ├─> Peons::handle_collect() → 返回 LAST
   ├─> Leader 等待多数派
   ├─> Leader::commit()   → 提交
   └─> Peons::handle_commit() → 应用
      │
      ▼
7. 编码持久化
   OSDMonitor::encode_pending(t)
   • t->put("osdmap", "inc_epoch_N", pending_inc_bl)
   • MonitorDBStore::apply(t) → 写入 RocksDB
      │
      ▼
8. 更新内存
   OSDMonitor::update_from_paxos()
   • osdmap.apply_incremental(pending_inc)
   • 广播新 OSDMap 给所有 OSD
      │
      ▼
9. 返回客户端
   reply_command(op, 0, "pool 'mypool' created")


═══════════════════════════════════════════════════════════════════════════════
                             性能优化机制
═══════════════════════════════════════════════════════════════════════════════

1. 租约机制 (Lease)
   ┌─────────┐                          ┌─────────┐
   │ Leader  │ ─────lease_ack(5s)────>  │  Peon   │
   └────┬────┘                          └────┬────┘
        │                                    │
        │ 在租约期间，Leader 可以直接        │
        │ 响应读请求，无需 Paxos 流程       │
        │                                    │
        │<────读请求可在本地处理────────────┘

2. 批量提交 (Batching)
   请求1 ──┐
   请求2 ──┤
   请求3 ──┼──> 等待 0.5s ──> 合并成一个 Paxos 提案
   请求4 ──┤
   请求5 ──┘

3. 增量更新 (Incremental)
   epoch 1: 完整 OSDMap (10MB)
   epoch 2: 增量 (100KB)  <- 只传输变化部分
   epoch 3: 增量 (50KB)

═══════════════════════════════════════════════════════════════════════════════

