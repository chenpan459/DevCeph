╔═══════════════════════════════════════════════════════════════════════════╗
║                    Ceph OSD 架构全景图                                     ║
╚═══════════════════════════════════════════════════════════════════════════╝

┌────────────────────────────────────────────────────────────────────────────┐
│                            客户端层                                         │
│  ┌──────────┐  ┌──────────┐  ┌──────────┐  ┌──────────┐                 │
│  │ librados │  │  RBD     │  │  CephFS  │  │  RGW     │                 │
│  │  应用    │  │  客户端  │  │  客户端  │  │  客户端  │                 │
│  └────┬─────┘  └────┬─────┘  └────┬─────┘  └────┬─────┘                 │
└───────┼─────────────┼─────────────┼─────────────┼────────────────────────┘
        │             │             │             │
        └─────────────┴─────────────┴─────────────┘
                      │
         ╔════════════╧════════════╗
         ║   Client Messenger      ║
         ╚════════════╤════════════╝
                      │ MOSDOp (READ/WRITE/...)
                      ↓
┌────────────────────────────────────────────────────────────────────────────┐
│                         OSD Daemon                                          │
├────────────────────────────────────────────────────────────────────────────┤
│                                                                             │
│  ┌──────────────────────────────────────────────────────────────────┐    │
│  │                    OSD::ms_dispatch()                             │    │
│  │                     消息分发入口                                  │    │
│  └────────────────────────────┬─────────────────────────────────────┘    │
│                                │                                           │
│                    ┌───────────┴───────────┐                              │
│                    │                       │                              │
│                    ▼                       ▼                              │
│         ┌─────────────────┐      ┌─────────────────┐                     │
│         │ handle_osd_op() │      │ handle_osd_map()│                     │
│         │   客户端 I/O    │      │   集群拓扑更新  │                     │
│         └────────┬────────┘      └────────┬────────┘                     │
│                  │                        │                              │
│                  │                        │ 触发 Peering                 │
│                  ▼                        ↓                              │
│  ┌──────────────────────────────────────────────────────────────────┐   │
│  │               OpScheduler（操作调度器）                           │   │
│  │                                                                    │   │
│  │   ┌─────────────┐   ┌─────────────┐   ┌─────────────┐          │   │
│  │   │ Client Ops  │   │ Recovery    │   │  Scrub      │          │   │
│  │   │  (高优先级) │   │  (中优先级) │   │ (低优先级)  │          │   │
│  │   └─────────────┘   └─────────────┘   └─────────────┘          │   │
│  │                                                                    │   │
│  │        mClock QoS 调度：Reservation, Weight, Limit               │   │
│  └────────────────────────────┬─────────────────────────────────────┘   │
│                                │                                          │
│                                ↓                                          │
│  ┌──────────────────────────────────────────────────────────────────┐   │
│  │              ShardedThreadPool（分片线程池）                      │   │
│  │                                                                    │   │
│  │   Shard 0    Shard 1    Shard 2    ...    Shard N               │   │
│  │   ├─PG 1     ├─PG 5     ├─PG 9            ├─PG M                 │   │
│  │   ├─PG 2     ├─PG 6     ├─PG 10           └─...                  │   │
│  │   └─...      └─...      └─...                                     │   │
│  │                                                                    │   │
│  │   减少锁竞争，提高并发性                                          │   │
│  └────────────────────────────┬─────────────────────────────────────┘   │
│                                │                                          │
│                                ↓                                          │
│  ┌──────────────────────────────────────────────────────────────────┐   │
│  │                 查找目标 PG                                        │   │
│  │   pg_map[pgid] → PGRef                                            │   │
│  └────────────────────────────┬─────────────────────────────────────┘   │
│                     OSD        │                                          │
│                    (守护进程)  │                                          │
└────────────────────────────────┼──────────────────────────────────────────┘
                                 │
                                 ↓
┌────────────────────────────────────────────────────────────────────────────┐
│                          Placement Group (PG)                               │
├────────────────────────────────────────────────────────────────────────────┤
│                                                                             │
│  ┌──────────────────────────────────────────────────────────────────┐    │
│  │              PG::do_request(OpRequestRef op)                      │    │
│  │                                                                    │    │
│  │  1. 状态检查                                                      │    │
│  │     - is_active() ?                                               │    │
│  │     - is_primary() ?                                              │    │
│  │  2. 版本检查                                                      │    │
│  │     - epoch 是否最新?                                             │    │
│  │  3. 权限检查                                                      │    │
│  │     - 客户端是否有权限?                                           │    │
│  └────────────────────────────┬─────────────────────────────────────┘    │
│                                │                                           │
│                    ┌───────────┴───────────┐                              │
│                    │                       │                              │
│                    ▼                       ▼                              │
│         ┌─────────────────┐      ┌─────────────────┐                     │
│         │  读操作路径     │      │  写操作路径     │                     │
│         │  do_read_op()   │      │  do_op()        │                     │
│         └────────┬────────┘      └────────┬────────┘                     │
│                  │                        │                              │
│                  │                        │                              │
│  ┌───────────────┘                        └─────────────────┐            │
│  │                                                            │            │
│  ▼                                                            ▼            │
│  ┌──────────────────────────────┐  ┌──────────────────────────────────┐ │
│  │      读取流程                │  │       写入流程                    │ │
│  ├──────────────────────────────┤  ├──────────────────────────────────┤ │
│  │ 1. find_object_context()     │  │ 1. prepare_transaction()         │ │
│  │    - 查找对象上下文（缓存）  │  │    - 分配版本号                  │ │
│  │                              │  │    - eversion_t (epoch, ver++)   │ │
│  │ 2. 检查快照                  │  │                                  │ │
│  │                              │  │ 2. 生成 pg_log_entry_t           │ │
│  │ 3. BlueStore::read()         │  │    - op type (MODIFY/DELETE)     │ │
│  │    - 查询元数据（RocksDB）   │  │    - prior_version               │ │
│  │    - 读取数据块              │  │    - reqid（重复检测）           │ │
│  │    - 解压缩、校验            │  │                                  │ │
│  │                              │  │ 3. execute_ctx()                 │ │
│  │ 4. reply_op()                │  │    - 本地写入                    │ │
│  │    - 返回数据给客户端        │  │                                  │ │
│  └──────────────────────────────┘  │ 4. issue_repop()                 │ │
│                                     │    - 向副本发送 MOSDRepOp        │ │
│                                     │                                  │ │
│                                     │ 5. 等待副本确认                  │ │
│                                     │    - applied: 数据持久化         │ │
│                                     │    - committed: 所有副本确认     │ │
│                                     │                                  │ │
│                                     │ 6. reply_ctx()                   │ │
│                                     │    - 返回 ACK 给客户端           │ │
│                                     └──────────────────────────────────┘ │
│                      PG                                                    │
│                   (数据分片)                                               │
└────────────────────────────────┬───────────────────────────────────────────┘
                                 │
                     ┌───────────┴───────────┐
                     │                       │
                     ▼                       ▼
┌─────────────────────────────┐  ┌─────────────────────────────┐
│    PGBackend 抽象层         │  │    PeeringState             │
│                             │  │    (状态机)                 │
├─────────────────────────────┤  ├─────────────────────────────┤
│  • submit_transaction()     │  │  状态转换：                 │
│  • objects_read_sync()      │  │  Initial → Reset            │
│  • recover_object()         │  │    ↓                        │
│  • scrub()                  │  │  Started/Primary            │
└───────┬─────────┬───────────┘  │    ↓                        │
        │         │              │  Peering                    │
        │         │              │    ├─ GetInfo               │
        ↓         ↓              │    ├─ GetLog                │
┌───────────┐ ┌──────────┐      │    ├─ GetMissing            │
│Replicated │ │   EC     │      │    └─ WaitUpThru            │
│  Backend  │ │ Backend  │      │      ↓                      │
├───────────┤ ├──────────┤      │  Active                     │
│• 副本模式 │ │• 纠删码  │      │    ├─ Recovering            │
│• N 个完整 │ │• K+M 分片│      │    ├─ Backfilling           │
│  副本     │ │• 任意 K  │      │    └─ Clean                 │
│• 简单快速 │ │  可恢复  │      └─────────────────────────────┘
└─────┬─────┘ └────┬─────┘
      │            │
      └─────┬──────┘
            │
            ↓
┌────────────────────────────────────────────────────────────────────────────┐
│                         PGLog (操作日志)                                    │
├────────────────────────────────────────────────────────────────────────────┤
│                                                                             │
│  作用 1: 恢复加速                                                           │
│  ┌─────────────────────────────────────────────────────────────────┐      │
│  │  log = [                                                         │      │
│  │    { ver: 100, op: WRITE, oid: "obj1" },                        │      │
│  │    { ver: 101, op: DELETE, oid: "obj2" },                       │      │
│  │    { ver: 102, op: MODIFY, oid: "obj1" },                       │      │
│  │    ...                                                            │      │
│  │  ]                                                                │      │
│  │                                                                   │      │
│  │  Peering 时对比日志 → 快速确定缺失对象                           │      │
│  └─────────────────────────────────────────────────────────────────┘      │
│                                                                             │
│  作用 2: 重复检测                                                           │
│  ┌─────────────────────────────────────────────────────────────────┐      │
│  │  dups = {                                                         │      │
│  │    reqid_1 → { user_version: 50, ... },                         │      │
│  │    reqid_2 → { user_version: 51, ... },                         │      │
│  │    ...                                                            │      │
│  │  }                                                                │      │
│  │                                                                   │      │
│  │  收到重复请求 → 直接返回之前的结果                               │      │
│  └─────────────────────────────────────────────────────────────────┘      │
│                                                                             │
│  作用 3: EC 回滚                                                            │
│  ┌─────────────────────────────────────────────────────────────────┐      │
│  │  log_entry.mod_desc = {                                          │      │
│  │    rollback_info_trimmed: false,                                 │      │
│  │    prior_version: eversion(98, 5),                               │      │
│  │    ...                                                            │      │
│  │  }                                                                │      │
│  │                                                                   │      │
│  │  EC 写入失败 → 可以回滚到之前版本                                │      │
│  └─────────────────────────────────────────────────────────────────┘      │
│                         PGLog                                               │
└────────────────────────────────┬────────────────────────────────────────────┘
                                 │
                                 ↓
┌────────────────────────────────────────────────────────────────────────────┐
│                       ObjectStore (存储抽象层)                              │
├────────────────────────────────────────────────────────────────────────────┤
│                                                                             │
│  接口：                                                                     │
│  • queue_transaction(Transaction t, Context *on_commit)                    │
│  • read(coll_t cid, hobject_t oid, ...)                                   │
│  • stat(coll_t cid, hobject_t oid, ...)                                   │
│                                                                             │
│  实现：                                                                     │
│  ┌───────────────┐  ┌───────────────┐  ┌───────────────┐                │
│  │  BlueStore    │  │  FileStore    │  │  MemStore     │                │
│  │  (生产环境)  │  │  (已弃用)     │  │  (测试用)     │                │
│  └───────┬───────┘  └───────────────┘  └───────────────┘                │
│          │                                                                 │
└──────────┼─────────────────────────────────────────────────────────────────┘
           │
           ↓
┌────────────────────────────────────────────────────────────────────────────┐
│                           BlueStore 架构                                    │
├────────────────────────────────────────────────────────────────────────────┤
│                                                                             │
│  ┌──────────────────────────────────────────────────────────────────┐    │
│  │              BlueStore::queue_transaction()                       │    │
│  └────────────────────────────┬─────────────────────────────────────┘    │
│                                │                                           │
│            ┌───────────────────┼───────────────────┐                      │
│            │                   │                   │                      │
│            ▼                   ▼                   ▼                      │
│  ┌─────────────────┐ ┌─────────────────┐ ┌─────────────────┐           │
│  │  Data Write     │ │  Metadata Write │ │   WAL           │           │
│  │  (数据块)       │ │  (RocksDB)      │ │  (预写日志)     │           │
│  └────────┬────────┘ └────────┬────────┘ └────────┬────────┘           │
│           │                   │                   │                      │
│           ↓                   ↓                   ↓                      │
│  ┌──────────────────────────────────────────────────────────────────┐   │
│  │                  物理设备布局                                     │   │
│  ├──────────────────────────────────────────────────────────────────┤   │
│  │                                                                    │   │
│  │  ┌────────────────────────────────────────────────────┐          │   │
│  │  │             BlueFS Partition                       │          │   │
│  │  │  ┌──────────────────────────────────────────┐     │          │   │
│  │  │  │  RocksDB WAL (小，SSD 优先)              │     │          │   │
│  │  │  │  - 写入密集                               │     │          │   │
│  │  │  │  - 低延迟要求                             │     │          │   │
│  │  │  └──────────────────────────────────────────┘     │          │   │
│  │  │  ┌──────────────────────────────────────────┐     │          │   │
│  │  │  │  RocksDB SST Files (中等大小)            │     │          │   │
│  │  │  │  - 已压缩的元数据                         │     │          │   │
│  │  │  └──────────────────────────────────────────┘     │          │   │
│  │  │  ┌──────────────────────────────────────────┐     │          │   │
│  │  │  │  BlueStore WAL (可选)                    │     │          │   │
│  │  │  └──────────────────────────────────────────┘     │          │   │
│  │  └────────────────────────────────────────────────────┘          │   │
│  │                                                                    │   │
│  │  ┌────────────────────────────────────────────────────┐          │   │
│  │  │        Object Data Blocks (大，可以是 HDD)        │          │   │
│  │  │  ┌──────────────────────────────────────────┐     │          │   │
│  │  │  │  Direct Block Management                  │     │          │   │
│  │  │  │  - 无文件系统                             │     │          │   │
│  │  │  │  - 4KB ~ 1MB 块                           │     │          │   │
│  │  │  │  - Allocator 管理                         │     │          │   │
│  │  │  │  - 支持压缩、校验和                       │     │          │   │
│  │  │  └──────────────────────────────────────────┘     │          │   │
│  │  └────────────────────────────────────────────────────┘          │   │
│  └──────────────────────────────────────────────────────────────────┘   │
│                                                                           │
│  ┌──────────────────────────────────────────────────────────────────┐   │
│  │                 RocksDB (元数据存储)                              │   │
│  ├──────────────────────────────────────────────────────────────────┤   │
│  │                                                                    │   │
│  │  Key-Value 存储：                                                 │   │
│  │  • "O" + oid → object_info_t (大小、mtime、版本等)                │   │
│  │  • "A" + oid → xattrs (扩展属性)                                  │   │
│  │  • "M" + oid → omap (对象键值对)                                  │   │
│  │  • "B" + offset → extent 位置（数据块在哪里）                     │   │
│  │  • "F" → freelist bitmap (空闲空间管理)                           │   │
│  └──────────────────────────────────────────────────────────────────┘   │
│                                                                           │
│  ┌──────────────────────────────────────────────────────────────────┐   │
│  │                    Allocator (空间分配器)                         │   │
│  ├──────────────────────────────────────────────────────────────────┤   │
│  │                                                                    │   │
│  │  算法：                                                            │   │
│  │  • StupidAllocator：简单的 first-fit                              │   │
│  │  • BitmapAllocator：位图管理（默认）                              │   │
│  │  • AvlAllocator：AVL 树管理                                       │   │
│  │  • HybridAllocator：混合策略                                      │   │
│  │                                                                    │   │
│  │  优化：                                                            │   │
│  │  • 延迟分配：批量分配，减少碎片                                   │   │
│  │  • 对齐：4KB 对齐优化                                             │   │
│  └──────────────────────────────────────────────────────────────────┘   │
│                            BlueStore                                      │
└───────────────────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════════════════════
                           数据流示例：写入 4KB 对象
═══════════════════════════════════════════════════════════════════════════════

Client (librados)
  ↓
  write("myobject", 0, 4096, data)
  ↓
┌─────────────────────────────────────────────────────────────────────────┐
│ OSD 0 (Primary)                                                          │
├─────────────────────────────────────────────────────────────────────────┤
│ 1. 接收 MOSDOp                                                          │
│    - object: "myobject"                                                 │
│    - op: WRITE                                                          │
│    - offset: 0, length: 4096                                           │
│    ↓                                                                    │
│ 2. 查找 PG                                                              │
│    hash("myobject") % pg_num → PG 2.3a                                │
│    CRUSH(2.3a, OSDMap) → [OSD 0, OSD 5, OSD 9]                       │
│    ↓                                                                    │
│ 3. PG 2.3a::do_op()                                                    │
│    - 状态检查：Active+Clean ✓                                         │
│    - 分配版本：eversion_t(1523, 456)                                  │
│    - 生成日志：pg_log_entry_t {                                       │
│        version: (1523, 456),                                           │
│        op: MODIFY,                                                     │
│        oid: "myobject",                                                │
│        reqid: client.4567.1:789                                        │
│      }                                                                 │
│    ↓                                                                    │
│ 4. BlueStore::queue_transaction()                                      │
│    ┌─ 分配 4KB 块：offset 0x12345000                                  │
│    ├─ 写入数据到设备：aio_write(0x12345000, data, 4096)              │
│    ├─ 更新 RocksDB：                                                   │
│    │   put("O" + oid, object_info)  # 元数据                          │
│    │   put("B" + oid + 0, extent(0x12345000, 4096))  # 位置           │
│    └─ fsync() → 数据持久化                                            │
│    ↓                                                                    │
│ 5. on_applied 回调                                                     │
│    - Primary 已持久化                                                  │
│    - (可选：此时返回客户端 - 快速 ACK)                                │
│    ↓                                                                    │
│ 6. 向副本发送 MOSDRepOp                                                │
│    - 目标：OSD 5, OSD 9                                               │
│    - 内容：Transaction + PG Log Entry                                  │
└─────────────────────────────────────────────────────────────────────────┘
        │                         │
        │ MOSDRepOp               │ MOSDRepOp
        ↓                         ↓
┌───────────────────┐      ┌───────────────────┐
│ OSD 5 (Replica 1) │      │ OSD 9 (Replica 2) │
├───────────────────┤      ├───────────────────┤
│ 7. 接收 MOSDRepOp │      │ 7. 接收 MOSDRepOp │
│    ↓              │      │    ↓              │
│ 8. BlueStore::    │      │ 8. BlueStore::    │
│    queue_trans()  │      │    queue_trans()  │
│    - 写入数据     │      │    - 写入数据     │
│    - fsync()      │      │    - fsync()      │
│    ↓              │      │    ↓              │
│ 9. 返回           │      │ 9. 返回           │
│    MOSDRepOpReply │      │    MOSDRepOpReply │
└─────────┬─────────┘      └─────────┬─────────┘
          │                          │
          │ MOSDRepOpReply           │ MOSDRepOpReply
          └──────────┬───────────────┘
                     ↓
┌─────────────────────────────────────────────────────────────────────────┐
│ OSD 0 (Primary - 继续)                                                   │
├─────────────────────────────────────────────────────────────────────────┤
│ 10. 收集副本响应                                                        │
│     - OSD 5: committed ✓                                               │
│     - OSD 9: committed ✓                                               │
│     ↓                                                                   │
│ 11. on_committed 回调                                                  │
│     - 所有副本已持久化                                                 │
│     ↓                                                                   │
│ 12. 返回 MOSDOpReply 给客户端                                          │
│     - result: 0 (成功)                                                 │
│     - version: (1523, 456)                                             │
└─────────────────────────────────────────────────────────────────────────┘
                     │
                     │ MOSDOpReply
                     ↓
                Client
              写入完成 ✓


═══════════════════════════════════════════════════════════════════════════════
                           Peering 流程详解
═══════════════════════════════════════════════════════════════════════════════

触发：OSDMap 变化（OSD 故障、新 OSD 加入等）

OSD 0                    OSD 5                    OSD 9
(Primary)               (Replica 1)              (Replica 2)
   │                        │                        │
   │ OSDMap epoch 1524 到达│                        │
   │ Acting: [0, 5, 9]     │                        │
   │ Up: [0, 5, 9]         │                        │
   ↓                        │                        │
┌──────────────┐           │                        │
│ Reset        │           │                        │
│ - 清理旧状态 │           │                        │
└───────┬──────┘           │                        │
        ↓                  │                        │
┌──────────────┐           │                        │
│ Started      │           │                        │
│ /Primary     │           │                        │
└───────┬──────┘           │                        │
        ↓                  │                        │
┌──────────────────────────────────────────────────────────┐
│ Peering/GetInfo                                           │
│ - 向所有 OSD 发送 pg_query_t                              │
└───────┬──────────────────────────────────────────────────┘
        │ pg_query_t                                         │
        ├────────────────────>│                             │
        │                      │                             │
        ├──────────────────────────────────────────────────>│
        │                      │                             │
        │                      ↓                             │
        │              ┌──────────────┐                     │
        │              │ 查询本地信息 │                     │
        │              │ pg_info_t    │                     │
        │              └───────┬──────┘                     │
        │                      │                             │
        │         pg_notify_t  │                             │
        │<─────────────────────┤                             │
        │                      │                  pg_notify_t│
        │<────────────────────────────────────────────────────┤
        │                      │                             │
        ↓                      │                             │
┌──────────────────────────────────────────────────────────┐
│ 收集信息：                                                │
│ peer_info[OSD 5] = { last_update: (1523, 455), ... }    │
│ peer_info[OSD 9] = { last_update: (1523, 456), ... }    │
│                                                           │
│ 选择权威：last_update 最新的 → OSD 9                     │
└───────┬──────────────────────────────────────────────────┘
        ↓                      │                             │
┌──────────────────────────────────────────────────────────┐
│ Peering/GetLog                                            │
│ - 请求权威日志                                            │
└───────┬──────────────────────────────────────────────────┘
        │ pg_query_t (FULLLOG) │                             │
        │──────────────────────────────────────────────────>│
        │                      │                             │
        │                      │              pg_log_t       │
        │<────────────────────────────────────────────────────┤
        │                      │                             │
        ↓                      │                             │
┌──────────────────────────────────────────────────────────┐
│ 合并日志，生成权威版本：                                  │
│ authoritative_log = merge(local_log, peer_logs)          │
└───────┬──────────────────────────────────────────────────┘
        ↓                      │                             │
┌──────────────────────────────────────────────────────────┐
│ Peering/GetMissing                                        │
│ - 对比日志，确定缺失对象                                  │
└───────┬──────────────────────────────────────────────────┘
        │ pg_query_t (MISSING) │                             │
        ├────────────────────>│                             │
        │                      ↓                             │
        │              ┌──────────────────┐                 │
        │              │ 对比本地日志     │                 │
        │              │ 生成 missing 列表│                 │
        │              └───────┬──────────┘                 │
        │         pg_missing_t │                             │
        │<─────────────────────┤                             │
        │                      │                             │
        ↓                      │                             │
┌──────────────────────────────────────────────────────────┐
│ 汇总：                                                    │
│ missing[OSD 5] = { "obj_x", "obj_y" }                    │
│ missing[OSD 9] = { }  (无缺失)                           │
└───────┬──────────────────────────────────────────────────┘
        ↓                      │                             │
┌──────────────────────────────────────────────────────────┐
│ Peering/WaitUpThru                                        │
│ - 等待 Monitor 确认 up_thru                               │
└───────┬──────────────────────────────────────────────────┘
        ↓                      │                             │
┌──────────────────────────────────────────────────────────┐
│ Active                                                    │
│ - PG 激活，可以处理 I/O                                   │
│ - 启动恢复进程                                            │
└───────┬──────────────────────────────────────────────────┘
        ↓                      │                             │
    (恢复流程)                │                             │


═══════════════════════════════════════════════════════════════════════════════
                           性能调优要点
═══════════════════════════════════════════════════════════════════════════════

1. OSD 线程池
   osd_op_num_threads_per_shard = 2        # 每 Shard 线程数
   osd_op_num_shards = 5                   # Shard 数量（默认）

2. BlueStore 缓存
   bluestore_cache_size = 4GB              # HDD
   bluestore_cache_size = 8GB              # SSD
   bluestore_cache_meta_ratio = 0.4        # 元数据缓存比例

3. 恢复限流
   osd_recovery_max_active = 3             # 并发恢复数
   osd_recovery_sleep = 0.1                # 恢复休眠时间

4. 调度器
   osd_op_queue = mclock_scheduler         # 使用 mClock
   osd_mclock_profile = high_client_ops    # 优先客户端 I/O

5. PG 数量
   pg_num = osd_num * 100 / replica_num    # 推荐公式
   例：10 OSD, 3 副本 → pg_num ≈ 333 → 向上取 512 (2^n)

