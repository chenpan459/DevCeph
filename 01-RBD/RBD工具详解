
# RBD 工具详解

## 概述

RBD（RADOS Block Device）工具是 Ceph 分布式存储系统中的命令行工具，用于管理 RADOS 块设备镜像。它提供了丰富的功能来创建、操作和管理 RBD 镜像，包括快照、克隆、加密、镜像等高级特性。

## 架构设计

### 1. 核心架构

```
rbd.cc (入口点)
  └── Shell.cc (命令调度器)
      ├── ArgumentTypes.cc (参数类型定义)
      ├── Utils.cc (工具函数)
      └── action/ (具体命令实现)
```

### 2. 主要组件

#### Shell 类 (`Shell.h`)
- **命令注册机制**：使用模板和函数指针注册命令
- **参数解析**：基于 boost::program_options
- **命令调度**：根据命令名查找并执行对应 action
- **帮助系统**：提供命令帮助和自动补全

#### Action 系统
每个操作对应一个独立的 action 文件：
- `List.cc` - 列出镜像
- `Create.cc` - 创建镜像
- `Info.cc` - 显示镜像信息
- `Clone.cc` - 克隆镜像
- `Snap.cc` - 快照管理
- `Copy.cc` - 镜像复制
- 等等（共40+个操作）

#### 工具类
- `ArgumentTypes.h` - 参数类型和常量定义
- `Utils.h` - 通用工具函数
- `ProgressContext` - 进度报告机制

## 命令体系

RBD 工具支持 40 多种操作，按功能分类：

### 1. 镜像管理
- **create** - 创建新镜像
- **remove** - 删除镜像
- **rename** - 重命名镜像
- **list** - 列出镜像
- **info** - 显示镜像详细信息
- **resize** - 调整镜像大小

### 2. 快照操作
- **snap create** - 创建快照
- **snap remove** - 删除快照
- **snap list** - 列出快照
- **snap rollback** - 回滚到快照
- **snap protect/unprotect** - 保护/取消保护快照

### 3. 克隆操作
- **clone** - 从快照克隆镜像
- **flatten** - 扁平化克隆镜像
- **children** - 列出克隆镜像
- **copy** - 复制镜像

### 4. 镜像镜像
- **mirror pool** - 池级镜像管理
- **mirror image** - 镜像级镜像管理
- **mirror snapshot schedule** - 快照调度

### 5. 高级功能
- **encryption** - 加密管理
- **object-map** - 对象映射
- **journal** - 日志管理
- **migration** - 镜像迁移
- **diff** - 差异比较

## 核心实现机制

### 1. 命令注册

每个 action 通过模板在编译时注册：

```cpp
SHELL_REGISTER_COMMAND(
  "create", "create", "create an rbd image",
  {}, get_arguments, do_create)
```

### 2. 参数处理

```cpp
void get_arguments(po::options_description *opts) {
  at::add_image_spec_options(positional, options, at::ARGUMENT_MODIFIER_NONE);
  at::add_create_image_options(options, true);
  // 添加特定参数...
}
```

### 3. 执行逻辑

```cpp
int do_create(librbd::RBD &rbd, librados::IoCtx& io_ctx,
              const char *imgname, uint64_t size,
              librbd::ImageOptions& opts) {
  return rbd.create4(io_ctx, imgname, size, opts);
}
```

## 关键特性

### 1. 异步操作支持
- 大部分操作支持同步和异步两种模式
- 异步操作使用 `librbd::RBD::AioCompletion`
- 支持进度回调和取消操作

### 2. 灵活的参数系统
- 统一的镜像规格解析（`pool/image@snapshot`）
- 丰富的配置选项（条带化、特性、加密等）
- 多种输出格式（表格、JSON、XML）

### 3. 错误处理
- 统一的错误码处理
- 详细的错误信息显示
- 支持调试模式和详细输出

### 4. 国际化支持
- UTF-8 编码支持
- 本地化消息处理
- 多语言帮助信息

## 使用示例

### 基本操作

```bash
# 创建镜像
rbd create mypool/myimage --size 1024M --order 22

# 列出镜像
rbd list mypool

# 显示镜像信息
rbd info mypool/myimage

# 创建快照
rbd snap create mypool/myimage@mysnapshot

# 克隆镜像
rbd clone mypool/myimage@mysnapshot mypool/myclone

# 删除镜像
rbd remove mypool/myimage
```

### 高级操作

```bash
# 加密镜像
rbd create mypool/encrypted --size 1G --encryption-format luks2 --encryption-passphrase-file passphrase.txt

# 镜像镜像
rbd mirror pool enable mypool image
rbd mirror image enable mypool/myimage

# 差异比较
rbd diff mypool/myimage --from-snap snapshot1

# 镜像迁移
rbd migration prepare mypool/myimage destpool/destimage
rbd migration execute mypool/myimage
```



1、常用命令
# 创建 RBD 镜像
rbd create mypool/myimage --size 10G
# 显示镜像列表
rbd ls mypool
# 显示镜像信息
rbd info mypool/myimage
# 挂载到本地
rbd map mypool/myimage
mount /dev/rbd0 /mnt
# 快照操作
rbd snap create mypool/myimage@snap1
rbd snap ls mypool/myimage
rbd snap rollback mypool/myimage@snap1

# 克隆与分层
rbd clone mypool/myimage@snap1 mypool/clone1
rbd flatten mypool/clone1
